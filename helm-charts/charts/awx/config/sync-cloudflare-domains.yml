---
# AWX Playbook: Sync Cloudflare Domains to AWX Surveys
# Place this in your Cloudflare DNS Project repo

- name: Sync Cloudflare Domains to AWX Template Surveys
  hosts: localhost
  connection: local
  gather_facts: false

  vars:
    awx_host: "{{ lookup('env', 'AWX_HOST') | default('http://localhost:80', true) }}"
    awx_username: "{{ lookup('env', 'AWX_USERNAME') | default('admin', true) }}"
    awx_password: "{{ lookup('env', 'AWX_PASSWORD') | default('admin', true) }}"
    # Prefer token-based auth. AWX_TOKEN may be provided via env or stored as a k8s secret named
    # 'awx-api-token' with key 'token' (base64). If present, the playbook will use a Bearer token
    # header for AWX API calls and ignore basic auth.
    awx_token: "{{ lookup('env', 'AWX_TOKEN') | default('', true) }}"
    # Optional CA certificate (base64) to trust AWX's TLS certificate when validate_certs=true.
    # If provided, set awx_ca_cert to the base64-encoded PEM content. The play will write it to
    # a temporary file and point uri.ca_path at it.
    awx_ca_cert: "{{ lookup('env', 'AWX_CA_CERT') | default('', true) }}"
    # Toggle TLS verification for AWX and Cloudflare API calls. Default true (production-safe).
    awx_validate_certs: true
    cloudflare_api_token: "{{ lookup('env', 'CLOUDFLARE_API_TOKEN') }}"
    governance_templates:
      - name: "Cloudflare-domain-standardize"
        template_id: 10
      - name: "Cloudflare-global-standardize"
        template_id: 11
      - name: "Cloudflare-platform-sync"
        template_id: 12
    dry_run: true

  tasks:
    - name: Read AWX admin password from Kubernetes secret when not provided
      when: awx_password in ["", "admin"]
      command: kubectl get secret ansible-awx-admin-password -n awx -o jsonpath="{.data.password}"
      register: awx_secret_b64
      changed_when: false

    - name: Set awx_password from Kubernetes secret
      when: awx_password in ["", "admin"]
      set_fact:
        awx_password: "{{ (awx_secret_b64.stdout | default('') ) | b64decode }}"

    - name: Read AWX token from Kubernetes secret when not provided via env
      when: awx_token | trim == ''
      command: kubectl get secret awx-api-token -n awx -o jsonpath="{.data.token}"
      register: awx_token_b64
      failed_when: false
      changed_when: false

    - name: Set awx_token from Kubernetes secret
      when: awx_token | trim == ''
      set_fact:
        awx_token: "{{ (awx_token_b64.stdout | default('') ) | b64decode }}"

    - name: Write AWX CA cert to temporary file if provided
      when: awx_ca_cert | trim != ''
      copy:
        content: "{{ awx_ca_cert | b64decode }}"
        dest: /tmp/awx_ca_cert.pem
        mode: '0644'

    - name: Try reading AWX CA from existing k8s secret 'awx-ca' (ca.crt)
      when: awx_ca_cert | trim == ''
      command: kubectl get secret awx-ca -n awx -o jsonpath="{.data['ca.crt']}"
      register: awx_ca_candidate
      failed_when: false
      changed_when: false

    - name: Set awx_ca_cert from awx-ca secret if found
      when: awx_ca_cert | trim == '' and (awx_ca_candidate.stdout | default('') ) | length > 0
      set_fact:
        awx_ca_cert: "{{ awx_ca_candidate.stdout }}"

    - name: Try reading AWX CA from 'ansible-awx-receptor-ca' (tls.crt)
      when: awx_ca_cert | trim == ''
      command: kubectl get secret ansible-awx-receptor-ca -n awx -o jsonpath="{.data['tls.crt']}"
      register: awx_ca_candidate2
      failed_when: false
      changed_when: false

    - name: Set awx_ca_cert from ansible-awx-receptor-ca if found
      when: awx_ca_cert | trim == '' and (awx_ca_candidate2.stdout | default('') ) | length > 0
      set_fact:
        awx_ca_cert: "{{ awx_ca_candidate2.stdout }}"

    - name: Fail if Cloudflare API token is not set
      fail:
        msg: "CLOUDFLARE_API_TOKEN environment variable not set. Configure as an AWX credential."
      when: cloudflare_api_token == ""

    - name: Fetch all zones from Cloudflare
      uri:
        url: "https://api.cloudflare.com/client/v4/zones"
        method: GET
        headers:
          Authorization: "Bearer {{ cloudflare_api_token }}"
          Content-Type: "application/json"
        return_content: true
        status_code: 200
        validate_certs: false  # Set to true in production if your CA trust is correct
      register: cloudflare_zones

    - name: Extract zone names
      set_fact:
        domain_list: "{{ cloudflare_zones.json.result | map(attribute='name') | list }}"

    - name: Display domains found
      debug:
        msg: "Found {{ domain_list | length }} Cloudflare domains: {{ domain_list | join(', ') }}"

    - name: Fail if no domains found
      fail:
        msg: "No domains found in Cloudflare account. Check your API token permissions."
      when: domain_list | length == 0

    - name: Lookup job template ID by name for each governance template
      uri:
        url: "{{ awx_host }}/api/v2/job_templates/?name={{ item.name | urlencode }}"
        method: GET
        headers: >-
          {{ ({'Authorization': ('Bearer ' + awx_token)} if awx_token|trim != '' else {}) | combine({'Content-Type':'application/json'}) }}
        user: "{{ (awx_token|trim == '') | ternary(awx_username, omit) }}"
        password: "{{ (awx_token|trim == '') | ternary(awx_password, omit) }}"
        force_basic_auth: "{{ (awx_token|trim == '') | ternary(true, omit) }}"
        validate_certs: "{{ awx_validate_certs }}"
        ca_path: "{{ (awx_ca_cert|trim != '') | ternary('/tmp/awx_ca_cert.pem', omit) }}"
        return_content: true
        status_code: 200
      register: lookup_result
      loop: "{{ governance_templates }}"
      loop_control:
        loop_var: item

    - name: Build governance_templates_with_ids
      set_fact:
        governance_templates_with_ids: >-
          {{ (governance_templates_with_ids | default([])) + [ {
            'name': item.item.name,
            'template_id': (item.json.results[0].id if (item.json.results | default([]))|length > 0 else None)
          } ] }}
      loop: "{{ lookup_result.results }}"
      loop_control:
        loop_var: item

    - name: Fail if any governance template name was not found
      fail:
        msg: "Some governance templates were not found in AWX: {{ governance_templates_with_ids | selectattr('template_id','equalto',None) | map(attribute='name') | list }}"
      when: (governance_templates_with_ids | selectattr('template_id','equalto',None) | list) | length > 0

    - name: Fetch current survey for each found template id
      uri:
        url: "{{ awx_host }}/api/v2/job_templates/{{ item.template_id }}/survey_spec/"
        method: GET
        headers: >-
          {{ ({'Authorization': ('Bearer ' + awx_token)} if awx_token|trim != '' else {}) | combine({'Content-Type':'application/json'}) }}
        user: "{{ (awx_token|trim == '') | ternary(awx_username, omit) }}"
        password: "{{ (awx_token|trim == '') | ternary(awx_password, omit) }}"
        force_basic_auth: "{{ (awx_token|trim == '') | ternary(true, omit) }}"
        validate_certs: "{{ awx_validate_certs }}"
        ca_path: "{{ (awx_ca_cert|trim != '') | ternary('/tmp/awx_ca_cert.pem', omit) }}"
        return_content: true
        status_code: 200
      register: current_surveys
      loop: "{{ governance_templates_with_ids }}"
      loop_control:
        loop_var: item

    - name: Fetch DNS records for each domain (to populate record name choices)
      uri:
        url: "https://api.cloudflare.com/client/v4/zones/{{ (cloudflare_zones.json.result | selectattr('name','equalto', item) | list)[0].id }}/dns_records?per_page=100"
        method: GET
        headers:
          Authorization: "Bearer {{ cloudflare_api_token }}"
          Content-Type: "application/json"
        return_content: true
        status_code: 200
        validate_certs: false
      register: domain_records
      loop: "{{ domain_list }}"
      loop_control:
        loop_var: item

    - name: Build list of record name choices (strip zone suffix)
      set_fact:
        record_name_choices: >-
          {{ (record_name_choices | default([])) + (
            domain_records.results
            | map(attribute='json.result')
            | sum(start=[])                     
            | map(attribute='name')             
            | map('regex_replace', ('\\.' + '(?:' + (domain_list | join('|')) + ')$'), '')
            | list
          ) | unique | list }}


    - name: Build updated survey bodies per template
      vars:
        # Build a JSON string for the updated 'spec' by iterating with a Jinja block.
        new_spec: |
          {% set ns = [] %}
          {% for q in item.json.spec | default([]) %}
            {% if q.variable in ['domain', 'survey_domain', 'template_domain', 'target_domains'] and q.type in ['multiplechoice', 'multiselect'] %}
              {% set _ = ns.append(q | combine({'choices': domain_list, 'default': domain_list[0]})) %}
            {% elif q.variable == 'survey_record_name' and q.type in ['multiplechoice','multiselect'] %}
              {% set _ = ns.append(q | combine({'choices': record_name_choices | default([]), 'default': (record_name_choices[0] if record_name_choices|length > 0 else '')})) %}
            {% elif q.variable in ['survey_record_proxied','survey_proxied','record_proxied'] and q.type in ['multiplechoice','multiselect'] %}
              {% set _ = ns.append(q | combine({'choices': q.choices if q.choices is defined else ['true','false'], 'default': 'true'})) %}
            {% else %}
              {% set _ = ns.append(q) %}
            {% endif %}
          {% endfor %}
          {{ ns | to_nice_json }}
      set_fact:
        updated_survey_bodies: "{{ (updated_survey_bodies | default([])) + [ {
            'template_id': item.item.template_id,
            'body': ( item.json | combine({'spec': (new_spec | from_json) }) )
          } ] }}"
      loop: "{{ current_surveys.results }}"
      loop_control:
        loop_var: item

    - name: Persist survey updates (apply) per template
      uri:
        url: "{{ awx_host }}/api/v2/job_templates/{{ item.template_id }}/survey_spec/"
        method: POST
        headers: >-
          {{ ({'Authorization': ('Bearer ' + awx_token)} if awx_token|trim != '' else {}) | combine({'Content-Type':'application/json'}) }}
        user: "{{ (awx_token|trim == '') | ternary(awx_username, omit) }}"
        password: "{{ (awx_token|trim == '') | ternary(awx_password, omit) }}"
        force_basic_auth: "{{ (awx_token|trim == '') | ternary(true, omit) }}"
        validate_certs: "{{ awx_validate_certs }}"
        ca_path: "{{ (awx_ca_cert|trim != '') | ternary('/tmp/awx_ca_cert.pem', omit) }}"
        body_format: json
        body: "{{ item.body }}"
        status_code: 200
      when: (dry_run | default(true) | bool) == false
      loop: "{{ updated_survey_bodies }}"
      loop_control:
        loop_var: item

    - name: Log update status
      debug:
        msg: "✅ Updated {{ item.name }} (ID: {{ item.template_id }}) with {{ domain_list | length }} domains"
      loop: "{{ governance_templates }}"
      loop_control:
        loop_var: item
