---
# Dynamic Cloudflare DNS Management Playbook
# This playbook is designed to work with AWX Job Templates and Surveys
# It supports dynamic domain selection and various DNS operations

- name: Dynamic Cloudflare DNS Management
  hosts: localhost
  connection: local
  gather_facts: false
  
  vars:
    # Default values (can be overridden by AWX surveys)
    cloudflare_domain: "{{ survey_domain | default('example.com') }}"
    dns_operation: "{{ survey_operation | default('create') }}"
    record_name: "{{ survey_record_name | default('test') }}"
    record_type: "{{ survey_record_type | default('A') }}"
    record_value: "{{ survey_record_value | default('192.168.1.100') }}"
    record_ttl: "{{ survey_record_ttl | default(300) | int }}"
    record_proxied: "{{ survey_record_proxied | default(false) | bool }}"
    
    # Bulk operations support
    bulk_records: "{{ survey_bulk_records | default([]) }}"
    
    # Security and zone settings
    cloudflare_zone_id: "{{ survey_zone_id | default('') }}"
    
  tasks:
    - name: Validate required variables
      assert:
        that:
          - cloudflare_domain is defined
          - cloudflare_domain != ""
          - dns_operation in ['create', 'update', 'delete', 'bulk_create', 'list']
        fail_msg: "Required variables are missing or invalid"
        
    - name: Display operation summary
      debug:
        msg:
          - "Domain: {{ cloudflare_domain }}"
          - "Operation: {{ dns_operation }}"
          - "Record: {{ record_name }}.{{ cloudflare_domain }}"
          - "Type: {{ record_type }}"
          - "Value: {{ record_value }}"
          - "TTL: {{ record_ttl }}"
          - "Proxied: {{ record_proxied }}"
          
    - name: Install Cloudflare collection (if not already installed)
      ansible.builtin.command:
        cmd: ansible-galaxy collection install cloudflare.cloudflare --force
      delegate_to: localhost
      run_once: true
      
    # Single DNS record operations
    - block:
        - name: Create/Update DNS record
          cloudflare.cloudflare.cloudflare_dns:
            zone: "{{ cloudflare_domain }}"
            record: "{{ record_name }}"
            type: "{{ record_type }}"
            value: "{{ record_value }}"
            ttl: "{{ record_ttl }}"
            api_token: "{{ ansible_env.CLOUDFLARE_API_TOKEN | default(omit) }}"
            account_email: "{{ ansible_env.CLOUDFLARE_EMAIL | default(omit) }}"
            account_api_key: "{{ ansible_env.CLOUDFLARE_API_KEY | default(omit) }}"
            proxied: "{{ record_proxied if record_type in ['A', 'AAAA', 'CNAME'] else omit }}"
            state: present
          register: dns_result
          when: dns_operation in ['create', 'update']
          
        - name: Delete DNS record
          cloudflare.cloudflare.cloudflare_dns:
            zone: "{{ cloudflare_domain }}"
            record: "{{ record_name }}"
            type: "{{ record_type }}"
            api_token: "{{ ansible_env.CLOUDFLARE_API_TOKEN | default(omit) }}"
            account_email: "{{ ansible_env.CLOUDFLARE_EMAIL | default(omit) }}"
            account_api_key: "{{ ansible_env.CLOUDFLARE_API_KEY | default(omit) }}"
            state: absent
          register: dns_result
          when: dns_operation == 'delete'
          
      when: dns_operation in ['create', 'update', 'delete']
      
    # Bulk operations
    - block:
        - name: Parse bulk records
          set_fact:
            parsed_bulk_records: "{{ bulk_records | from_json if bulk_records is string else bulk_records }}"
          when: bulk_records | length > 0
          
        - name: Create multiple DNS records
          cloudflare.cloudflare.cloudflare_dns:
            zone: "{{ cloudflare_domain }}"
            record: "{{ item.name }}"
            type: "{{ item.type }}"
            value: "{{ item.value }}"
            ttl: "{{ item.ttl | default(300) }}"
            api_token: "{{ ansible_env.CLOUDFLARE_API_TOKEN | default(omit) }}"
            account_email: "{{ ansible_env.CLOUDFLARE_EMAIL | default(omit) }}"
            account_api_key: "{{ ansible_env.CLOUDFLARE_API_KEY | default(omit) }}"
            proxied: "{{ item.proxied | default(false) if item.type in ['A', 'AAAA', 'CNAME'] else omit }}"
            state: present
          loop: "{{ parsed_bulk_records }}"
          register: bulk_dns_results
          when: parsed_bulk_records is defined
          
      when: dns_operation == 'bulk_create'
      
    # List operation
    - block:
        - name: List DNS records
          cloudflare.cloudflare.cloudflare_dns:
            zone: "{{ cloudflare_domain }}"
            api_token: "{{ ansible_env.CLOUDFLARE_API_TOKEN | default(omit) }}"
            account_email: "{{ ansible_env.CLOUDFLARE_EMAIL | default(omit) }}"
            account_api_key: "{{ ansible_env.CLOUDFLARE_API_KEY | default(omit) }}"
            state: present
          register: dns_list_result
          
        - name: Display DNS records
          debug:
            msg: "Found {{ dns_list_result.result | length }} DNS records for {{ cloudflare_domain }}"
            
      when: dns_operation == 'list'
      
    # Results reporting
    - name: Report single operation result
      debug:
        msg: 
          - "Operation: {{ dns_operation }}"
          - "Record: {{ record_name }}.{{ cloudflare_domain }}"
          - "Status: {{ 'Success' if dns_result.changed else 'No changes needed' }}"
      when: 
        - dns_operation in ['create', 'update', 'delete']
        - dns_result is defined
        
    - name: Report bulk operation results
      debug:
        msg: 
          - "Bulk operation completed"
          - "Records processed: {{ bulk_dns_results.results | length }}"
          - "Records changed: {{ bulk_dns_results.results | selectattr('changed') | list | length }}"
      when: 
        - dns_operation == 'bulk_create'
        - bulk_dns_results is defined