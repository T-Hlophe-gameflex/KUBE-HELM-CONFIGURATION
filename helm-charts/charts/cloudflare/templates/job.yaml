{{- if .Values.job.schedule }}
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ include "cloudflare.jobName" . }}
  namespace: {{ .Values.job.namespace }}
  labels:
    {{- include "cloudflare.labels" . | nindent 4 }}
spec:
  schedule: {{ .Values.job.schedule | quote }}
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      backoffLimit: {{ .Values.job.backoffLimit }}
      {{- if .Values.job.ttlSecondsAfterFinished }}
      ttlSecondsAfterFinished: {{ .Values.job.ttlSecondsAfterFinished }}
      {{- end }}
      template:
        metadata:
          labels:
            {{- include "cloudflare.selectorLabels" . | nindent 12 }}
        spec:
          restartPolicy: {{ .Values.job.restartPolicy }}
          {{- with .Values.nodeSelector }}
          nodeSelector:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.affinity }}
          affinity:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.tolerations }}
          tolerations:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          containers:
          - name: ansible-cloudflare
            image: {{ .Values.ansible.image }}
            imagePullPolicy: {{ .Values.ansible.imagePullPolicy }}
            command:
              - /bin/bash
              - -c
              - |
                set -e
                echo "Installing Cloudflare collection..."
                ansible-galaxy collection install cloudflare.cloudflare
                echo "Running Cloudflare DNS playbook..."
                ansible-playbook /ansible/playbook.yml -v
            env:
              {{- if .Values.cloudflare.apiToken }}
              - name: CLOUDFLARE_API_TOKEN
                valueFrom:
                  secretKeyRef:
                    name: {{ include "cloudflare.fullname" . }}-credentials
                    key: api-token
              {{- else }}
              - name: CLOUDFLARE_EMAIL
                valueFrom:
                  secretKeyRef:
                    name: {{ include "cloudflare.fullname" . }}-credentials
                    key: email
              - name: CLOUDFLARE_API_KEY
                valueFrom:
                  secretKeyRef:
                    name: {{ include "cloudflare.fullname" . }}-credentials
                    key: global-api-key
              {{- end }}
              {{- if .Values.cloudflare.zoneId }}
              - name: CLOUDFLARE_ZONE_ID
                valueFrom:
                  secretKeyRef:
                    name: {{ include "cloudflare.fullname" . }}-credentials
                    key: zone-id
              {{- end }}
            volumeMounts:
            - name: playbook
              mountPath: /ansible
              readOnly: true
            resources:
              {{- toYaml .Values.resources | nindent 14 }}
          volumes:
          - name: playbook
            configMap:
              name: {{ include "cloudflare.fullname" . }}-playbook
{{- else }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "cloudflare.jobName" . }}
  namespace: {{ .Values.job.namespace }}
  labels:
    {{- include "cloudflare.labels" . | nindent 4 }}
spec:
  backoffLimit: {{ .Values.job.backoffLimit }}
  {{- if .Values.job.ttlSecondsAfterFinished }}
  ttlSecondsAfterFinished: {{ .Values.job.ttlSecondsAfterFinished }}
  {{- end }}
  template:
    metadata:
      labels:
        {{- include "cloudflare.selectorLabels" . | nindent 8 }}
    spec:
      restartPolicy: {{ .Values.job.restartPolicy }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.securityContext | nindent 8 }}
      containers:
      - name: ansible-cloudflare
        image: {{ .Values.ansible.image }}
        imagePullPolicy: {{ .Values.ansible.imagePullPolicy }}
        command:
          - /bin/bash
          - -c
          - |
            set -e
            echo "Installing Cloudflare collection..."
            ansible-galaxy collection install cloudflare.cloudflare
            echo "Running Cloudflare DNS playbook..."
            ansible-playbook /ansible/playbook.yml -v
        env:
          {{- if .Values.cloudflare.apiToken }}
          - name: CLOUDFLARE_API_TOKEN
            valueFrom:
              secretKeyRef:
                name: {{ include "cloudflare.fullname" . }}-credentials
                key: api-token
          {{- else }}
          - name: CLOUDFLARE_EMAIL
            valueFrom:
              secretKeyRef:
                name: {{ include "cloudflare.fullname" . }}-credentials
                key: email
          - name: CLOUDFLARE_API_KEY
            valueFrom:
              secretKeyRef:
                name: {{ include "cloudflare.fullname" . }}-credentials
                key: global-api-key
          {{- end }}
          {{- if .Values.cloudflare.zoneId }}
          - name: CLOUDFLARE_ZONE_ID
            valueFrom:
              secretKeyRef:
                name: {{ include "cloudflare.fullname" . }}-credentials
                key: zone-id
          {{- end }}
        volumeMounts:
        - name: playbook
          mountPath: /ansible
          readOnly: true
        resources:
          {{- toYaml .Values.resources | nindent 10 }}
      volumes:
      - name: playbook
        configMap:
          name: {{ include "cloudflare.fullname" . }}-playbook
{{- end }}