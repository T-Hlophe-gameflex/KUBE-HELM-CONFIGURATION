.PHONY: help setup clean deploy upgrade test remove status kibana elasticsearch logs generate-logs

# ============================================================================
# ELK Stack Platform - Helm-Native Deployment
# ============================================================================
# This Makefile uses Helm capabilities directly - no script wrappers!
# Benefits: Standard practices, GitOps-ready, CI/CD friendly
# ============================================================================

help:
	@echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
	@echo "‚ïë     ELK Stack Platform - Helm-Native Deployment          ‚ïë"
	@echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
	@echo ""
	@echo "üì¶ Deployment:"
	@echo "  deploy              - Deploy complete ELK Stack Platform"
	@echo "  deploy-elk          - Deploy only ELK components"
	@echo "  deploy-services     - Deploy only business services"
	@echo "  deploy-database     - Deploy only PostgreSQL"
	@echo "  upgrade             - Upgrade existing deployment"
	@echo "  remove              - Uninstall deployment"
	@echo ""
	@echo "‚úÖ Testing & Validation:"
	@echo "  test                - Run Helm tests (health checks)"
	@echo "  status              - Show deployment status"
	@echo "  validate            - Validate Helm configuration"
	@echo ""
	@echo "üåê Access & Monitoring:"
	@echo "  kibana              - Port-forward to Kibana (5601)"
	@echo "  elasticsearch       - Port-forward to Elasticsearch (9200)"
	@echo "  stop-kibana         - Stop Kibana port-forward"
	@echo "  logs                - View pod logs"
	@echo ""
	@echo "üõ†Ô∏è  Utilities:"
	@echo "  setup               - Create Kind cluster"
	@echo "  clean               - Delete cluster"
	@echo "  generate-logs       - Generate sample logs (optional)"
	@echo ""
	@echo "üìä Information:"
	@echo "  info                - Show cluster and deployment info"
	@echo "  values              - Show current values configuration"
	@echo ""
	@echo "üí° Quick Start:"
	@echo "  make setup && make deploy && make test && make kibana"
	@echo ""

# ============================================================================
# Cluster Management (Kubespray)
# ============================================================================

setup:
	@echo "üèóÔ∏è  Deploying Kubernetes cluster with Kubespray..."
	@./scripts/setup-kubespray.sh
	@echo "‚úÖ Cluster ready!"

clean:
	@echo "üóëÔ∏è  Destroying Kubespray cluster..."
	@cd /Users/thami.hlophe/kubespray && \
		ansible-playbook -i inventory/helm-kube-cluster/inventory.ini --become reset.yml
	@echo "‚úÖ Cluster destroyed!"

# ============================================================================
# Helm Deployments (Direct - No Scripts!)
# ============================================================================

RELEASE_NAME := elk-stack-platform
NAMESPACE := monitoring
CHART_PATH := ./helm-charts
TIMEOUT := 10m

# All values files
VALUES_FILES := \
	--values $(CHART_PATH)/values.yaml \
	--values $(CHART_PATH)/values.infrastructure.yaml \
	--values $(CHART_PATH)/values.elasticsearch.yaml \
	--values $(CHART_PATH)/values.kibana.yaml \
	--values $(CHART_PATH)/values.logstash.yaml \
	--values $(CHART_PATH)/values.filebeat.yaml \
	--values $(CHART_PATH)/values.postgres.yaml \
	--values $(CHART_PATH)/values.order-service.yaml \
	--values $(CHART_PATH)/values.user-service.yaml

# ELK-only values files
ELK_VALUES_FILES := \
	--values $(CHART_PATH)/values.yaml \
	--values $(CHART_PATH)/values.infrastructure.yaml \
	--values $(CHART_PATH)/values.elasticsearch.yaml \
	--values $(CHART_PATH)/values.kibana.yaml \
	--values $(CHART_PATH)/values.logstash.yaml \
	--values $(CHART_PATH)/values.filebeat.yaml

deploy:
	@echo "üöÄ Deploying complete ELK Stack Platform..."
	@helm upgrade --install $(RELEASE_NAME) $(CHART_PATH) \
		--namespace $(NAMESPACE) --create-namespace \
		$(VALUES_FILES) \
		--wait --timeout $(TIMEOUT)
	@echo ""
	@echo "‚úÖ Deployment complete!"
	@echo "üìä Check status: make status"
	@echo "üß™ Run tests: make test"
	@echo "üåê Access Kibana: make kibana"

deploy-elk:
	@echo "üìä Deploying ELK stack components only..."
	@helm upgrade --install $(RELEASE_NAME) $(CHART_PATH) \
		--namespace $(NAMESPACE) --create-namespace \
		$(ELK_VALUES_FILES) \
		--set businessServices.orderService.enabled=false \
		--set businessServices.userService.enabled=false \
		--set postgres.enabled=false \
		--wait --timeout $(TIMEOUT)
	@echo ""
	@echo "‚úÖ ELK stack deployed!"
	@echo "üß™ Run tests: make test"

deploy-services:
	@echo "üè¢ Deploying business services only..."
	@helm upgrade --install $(RELEASE_NAME) $(CHART_PATH) \
		--namespace $(NAMESPACE) --create-namespace \
		--values $(CHART_PATH)/values.yaml \
		--values $(CHART_PATH)/values.infrastructure.yaml \
		--values $(CHART_PATH)/values.order-service.yaml \
		--values $(CHART_PATH)/values.user-service.yaml \
		--set observability.elasticsearch.enabled=false \
		--set observability.kibana.enabled=false \
		--set observability.logstash.enabled=false \
		--set observability.filebeat.enabled=false \
		--wait --timeout $(TIMEOUT)
	@echo ""
	@echo "‚úÖ Services deployed!"

deploy-database:
	@echo "üóÉÔ∏è  Deploying PostgreSQL database only..."
	@helm upgrade --install $(RELEASE_NAME) $(CHART_PATH) \
		--namespace $(NAMESPACE) --create-namespace \
		--values $(CHART_PATH)/values.yaml \
		--values $(CHART_PATH)/values.infrastructure.yaml \
		--values $(CHART_PATH)/values.postgres.yaml \
		--set observability.elasticsearch.enabled=false \
		--set observability.kibana.enabled=false \
		--set observability.logstash.enabled=false \
		--set observability.filebeat.enabled=false \
		--set businessServices.orderService.enabled=false \
		--set businessServices.userService.enabled=false \
		--wait --timeout $(TIMEOUT)
	@echo ""
	@echo "‚úÖ Database deployed!"

upgrade:
	@echo "‚¨ÜÔ∏è  Upgrading deployment..."
	@helm upgrade $(RELEASE_NAME) $(CHART_PATH) \
		--namespace $(NAMESPACE) \
		$(VALUES_FILES) \
		--wait --timeout $(TIMEOUT)
	@echo ""
	@echo "‚úÖ Upgrade complete!"
	@echo "üß™ Run tests: make test"

remove:
	@echo "üóëÔ∏è  Removing deployment..."
	@helm uninstall $(RELEASE_NAME) --namespace $(NAMESPACE)
	@echo "‚úÖ Deployment removed!"

# ============================================================================
# Testing & Validation (Helm-Native)
# ============================================================================

test:
	@echo "üß™ Running Helm tests..."
	@helm test $(RELEASE_NAME) --namespace $(NAMESPACE) --logs
	@echo "‚úÖ All tests passed!"

status:
	@echo "üìä Deployment Status:"
	@echo "===================="
	@helm status $(RELEASE_NAME) --namespace $(NAMESPACE)
	@echo ""
	@echo "üì¶ Pods:"
	@kubectl get pods -n $(NAMESPACE)
	@echo ""
	@echo "üîå Services:"
	@kubectl get svc -n $(NAMESPACE)

validate:
	@echo "‚úÖ Validating Helm configuration..."
	@helm lint $(CHART_PATH)
	@echo ""
	@echo "üîç Template validation:"
	@helm template $(RELEASE_NAME) $(CHART_PATH) $(VALUES_FILES) > /dev/null
	@echo "‚úÖ Configuration valid!"

info:
	@echo "‚ÑπÔ∏è  Cluster Information:"
	@echo "======================="
	@kubectl cluster-info
	@echo ""
	@echo "üìä Namespace Status:"
	@kubectl get all -n $(NAMESPACE)
	@echo ""
	@echo "üíæ Storage:"
	@kubectl get pvc -n $(NAMESPACE)

values:
	@echo "üìÑ Current Values Configuration:"
	@echo "==============================="
	@helm get values $(RELEASE_NAME) -n $(NAMESPACE) --all

# ============================================================================
# Access & Port Forwarding
# ============================================================================

kibana:
	@echo "üåê Starting Kibana port-forward..."
	@pkill -9 -f "kubectl port-forward.*5601" 2>/dev/null || true
	@sleep 2
	@echo "üìä Kibana will be available at: http://localhost:5601"
	@echo "‚èπÔ∏è  Stop with: make stop-kibana"
	@kubectl port-forward -n $(NAMESPACE) svc/$(RELEASE_NAME)-kibana 5601:5601 > /dev/null 2>&1 &
	@echo "‚úÖ Port-forward started in background"

stop-kibana:
	@echo "‚èπÔ∏è  Stopping Kibana port-forward..."
	@pkill -9 -f "kubectl port-forward.*5601" 2>/dev/null || echo "No port-forward running"
	@echo "‚úÖ Stopped"

elasticsearch:
	@echo "üîç Starting Elasticsearch port-forward..."
	@pkill -9 -f "kubectl port-forward.*9200" 2>/dev/null || true
	@sleep 2
	@echo "üìä Elasticsearch will be available at: http://localhost:9200"
	@echo "‚èπÔ∏è  Stop with Ctrl+C"
	@kubectl port-forward -n $(NAMESPACE) svc/$(RELEASE_NAME)-elasticsearch 9200:9200

logstash:
	@echo "üìù Starting Logstash port-forward..."
	@echo "üìä Logstash API will be available at: http://localhost:9600"
	@kubectl port-forward -n $(NAMESPACE) svc/$(RELEASE_NAME)-logstash 9600:9600

# ============================================================================
# Logging & Debugging
# ============================================================================

logs:
	@echo "üìã Component Logs:"
	@echo "=================="
	@echo ""
	@echo "Choose component:"
	@echo "  1) Elasticsearch"
	@echo "  2) Kibana"
	@echo "  3) Logstash"
	@echo "  4) Filebeat"
	@echo "  5) All"
	@echo ""
	@echo "Usage examples:"
	@echo "  make logs-elasticsearch"
	@echo "  make logs-kibana"

logs-elasticsearch:
	@kubectl logs -n $(NAMESPACE) -l app=elasticsearch --tail=100 -f

logs-kibana:
	@kubectl logs -n $(NAMESPACE) -l app=kibana --tail=100 -f

logs-logstash:
	@kubectl logs -n $(NAMESPACE) -l app=logstash --tail=100 -f

logs-filebeat:
	@kubectl logs -n $(NAMESPACE) -l app=filebeat --tail=100 -f

logs-all:
	@echo "üìã Recent logs from all components:"
	@echo "===================================="
	@echo ""
	@echo "üîç Elasticsearch:"
	@kubectl logs -n $(NAMESPACE) -l app=elasticsearch --tail=20 | head -20
	@echo ""
	@echo "üìä Kibana:"
	@kubectl logs -n $(NAMESPACE) -l app=kibana --tail=20 | head -20
	@echo ""
	@echo "üìù Logstash:"
	@kubectl logs -n $(NAMESPACE) -l app=logstash --tail=20 | head -20

# ============================================================================
# Utilities
# ============================================================================

generate-logs:
	@echo "üìù Generating sample logs..."
	@if [ -f ./scripts/generate-sample-logs.sh ]; then \
		./scripts/generate-sample-logs.sh 50; \
		echo "‚úÖ Sample logs generated!"; \
	else \
		echo "‚ö†Ô∏è  generate-sample-logs.sh not found (optional)"; \
	fi
	@echo "üìä View in Kibana: http://localhost:5601"

# ============================================================================
# Advanced Operations
# ============================================================================

dry-run:
	@echo "üß™ Dry-run deployment (template only)..."
	@helm upgrade --install $(RELEASE_NAME) $(CHART_PATH) \
		--namespace $(NAMESPACE) \
		$(VALUES_FILES) \
		--dry-run --debug

diff:
	@echo "üîç Checking differences..."
	@which helm-diff > /dev/null || (echo "Install helm-diff plugin: helm plugin install https://github.com/databus23/helm-diff"; exit 1)
	@helm diff upgrade $(RELEASE_NAME) $(CHART_PATH) \
		--namespace $(NAMESPACE) \
		$(VALUES_FILES)

rollback:
	@echo "‚èÆÔ∏è  Rolling back to previous version..."
	@helm rollback $(RELEASE_NAME) --namespace $(NAMESPACE)
	@echo "‚úÖ Rollback complete!"

history:
	@echo "üìú Deployment history:"
	@helm history $(RELEASE_NAME) --namespace $(NAMESPACE)

# ============================================================================
# Environment-Specific Deployments
# ============================================================================

deploy-dev:
	@echo "üõ†Ô∏è  Deploying to development environment..."
	@ENVIRONMENT=development $(MAKE) deploy

deploy-staging:
	@echo "üß™ Deploying to staging environment..."
	@ENVIRONMENT=staging $(MAKE) deploy

deploy-prod:
	@echo "üè≠ Deploying to production environment..."
	@ENVIRONMENT=production $(MAKE) deploy
	@echo "‚ö†Ô∏è  Production deployment complete - verify with 'make test'"

# ============================================================================
# Clean Targets
# ============================================================================

clean-logs:
	@echo "üßπ Cleaning old logs..."
	@kubectl delete pods -n $(NAMESPACE) -l app=filebeat --grace-period=0 --force 2>/dev/null || true
	@echo "‚úÖ Logs cleaned!"

clean-data:
	@echo "‚ö†Ô∏è  WARNING: This will delete all Elasticsearch data!"
	@read -p "Are you sure? [y/N] " -n 1 -r; \
	echo ""; \
	if [[ $$REPLY =~ ^[Yy]$$ ]]; then \
		kubectl delete pvc -n $(NAMESPACE) -l app=elasticsearch; \
		echo "‚úÖ Data deleted!"; \
	else \
		echo "‚ùå Cancelled"; \
	fi

# ============================================================================
# Quick Commands
# ============================================================================

# One-liner: full deployment with test
deploy-and-test: deploy test kibana

# One-liner: full stack setup
all: setup deploy test
	@echo ""
	@echo "‚úÖ Complete stack deployed and tested!"
	@echo "üåê Access Kibana: make kibana"

# Restart a component
restart-elasticsearch:
	@kubectl rollout restart deployment/$(RELEASE_NAME)-elasticsearch -n $(NAMESPACE)

restart-kibana:
	@kubectl rollout restart deployment/$(RELEASE_NAME)-kibana -n $(NAMESPACE)

restart-logstash:
	@kubectl rollout restart deployment/$(RELEASE_NAME)-logstash -n $(NAMESPACE)

# ============================================================================
# Development Helpers
# ============================================================================

watch:
	@watch -n 2 'kubectl get pods -n $(NAMESPACE)'

describe-pods:
	@kubectl describe pods -n $(NAMESPACE)

events:
	@kubectl get events -n $(NAMESPACE) --sort-by='.lastTimestamp'

# ============================================================================
# End of Makefile
# ============================================================================

# ============================================================================
# Ansible-based Deployments
# ============================================================================

deploy:
.gitignore @echo "üöÄ Deploying all components with Ansible..."
.gitignore @ansible-playbook playbooks/main.yml -e action=deploy
.gitignore @echo "‚úÖ Deployment complete!"

remove:
.gitignore @echo "üóëÔ∏è  Removing all components with Ansible..."
.gitignore @ansible-playbook playbooks/main.yml -e action=remove
.gitignore @echo "‚úÖ Removal complete!"

validate:
.gitignore @echo "üîç Validating deployments..."
.gitignore @ansible-playbook playbooks/main.yml -e action=validate
.gitignore @echo "‚úÖ Validation complete!"
