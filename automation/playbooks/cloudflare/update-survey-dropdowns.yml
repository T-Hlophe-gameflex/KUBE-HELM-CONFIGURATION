---
- hosts: localhost
  connection: local
  gather_facts: false
  vars:
    awx_host: "{{ ansible_host | default('localhost:8052') }}"
    awx_template_id: "{{ template_id | default('21') }}"
    max_domains: 20
    max_records: 50
    
  tasks:
    - name: Update Survey Dropdowns with Live Cloudflare Data
      block:
        - name: Get AWX admin password
          shell: kubectl get secret ansible-awx-admin-password -n awx -o jsonpath="{.data.password}" | base64 --decode
          register: awx_password_result
          no_log: true
          
        - name: Set AWX password
          set_fact:
            awx_password: "{{ awx_password_result.stdout }}"
          no_log: true
          
        - name: Fetch current survey configuration
          uri:
            url: "http://{{ awx_host }}/api/v2/job_templates/{{ awx_template_id }}/survey_spec/"
            method: GET
            user: admin
            password: "{{ awx_password }}"
            force_basic_auth: true
            return_content: true
          register: current_survey
          
        - name: Get all Cloudflare zones
          uri:
            url: "https://api.cloudflare.com/client/v4/zones"
            method: GET
            headers:
              Authorization: "Bearer {{ lookup('env','CLOUDFLARE_API_TOKEN') }}"
            return_content: true
          register: cf_zones
          when: lookup('env','CLOUDFLARE_API_TOKEN') | length > 0
          
        - name: Extract domain names from zones
          set_fact:
            domain_list: "{{ (cf_zones.json.result | map(attribute='name') | list | sort)[:max_domains] + ['[MANUAL_ENTRY]'] }}"
          when: cf_zones is defined and cf_zones.json.success
          
        - name: Use fallback domain list if API fails
          set_fact:
            domain_list: 
              - "efustryton.co.za"
              - "efutechnologies.co.za" 
              - "[MANUAL_ENTRY]"
          when: domain_list is not defined
          
        - name: Collect DNS records from all zones
          uri:
            url: "https://api.cloudflare.com/client/v4/zones/{{ item.id }}/dns_records"
            method: GET
            headers:
              Authorization: "Bearer {{ lookup('env','CLOUDFLARE_API_TOKEN') }}"
            return_content: true
          register: dns_records_results
          loop: "{{ cf_zones.json.result }}"
          when: 
            - cf_zones is defined 
            - cf_zones.json.success
            - lookup('env','CLOUDFLARE_API_TOKEN') | length > 0
          
        - name: Extract unique record names
          set_fact:
            all_record_names: >-
              {{ dns_records_results.results 
                 | selectattr('json', 'defined')
                 | selectattr('json.success', 'equalto', true)
                 | map(attribute='json.result') 
                 | flatten
                 | map(attribute='name')
                 | map('regex_replace', '\.[^.]+\.[^.]+$', '')
                 | select('ne', '@')
                 | unique 
                 | sort
                 | list }}
          when: dns_records_results is defined
          
        - name: Build final record list
          set_fact:
            record_list: "{{ (all_record_names[:max_records] if all_record_names is defined else []) + ['[NONE]', '[REFRESH_NEEDED]'] }}"
          
        - name: Use fallback record list if needed
          set_fact:
            record_list: ["[NONE]", "[REFRESH_NEEDED]"]
          when: record_list is not defined or record_list | length <= 2
          
        - name: Update survey with new dropdown choices
          set_fact:
            updated_survey: >-
              {{ current_survey.json | combine({
                'spec': current_survey.json.spec | map('combine', {
                  'choices': domain_list
                } if item.variable == 'existing_domain' else (
                  {'choices': record_list} if item.variable == 'existing_record' else {}
                )) | list
              }) }}
          
        - name: Apply updated survey to AWX
          uri:
            url: "http://{{ awx_host }}/api/v2/job_templates/{{ awx_template_id }}/survey_spec/"
            method: POST
            user: admin
            password: "{{ awx_password }}"
            force_basic_auth: true
            body_format: json
            body: "{{ updated_survey }}"
            return_content: true
          register: survey_update_result
          
        - name: Display update results
          debug:
            msg:
              - "‚úÖ Survey dropdowns updated successfully!"
              - "üìä Statistics:"
              - "   ‚Ä¢ Domains: {{ domain_list | length }} options"
              - "   ‚Ä¢ Records: {{ record_list | length }} options"
              - "   ‚Ä¢ Updated at: {{ ansible_date_time.iso8601 }}"
              
      rescue:
        - name: Handle update failures
          debug:
            msg:
              - "‚ùå Failed to update survey dropdowns"
              - "Error: {{ ansible_failed_result.msg | default('Unknown error') }}"
              - "Continuing with existing survey configuration..."
              
    - name: Verify survey configuration
      uri:
        url: "http://{{ awx_host }}/api/v2/job_templates/{{ awx_template_id }}/survey_spec/"
        method: GET
        user: admin
        password: "{{ awx_password }}"
        force_basic_auth: true
        return_content: true
      register: final_survey
      
    - name: Display final survey status
      debug:
        msg:
          - "üìã Current Survey Configuration:"
          - "   ‚Ä¢ Template ID: {{ awx_template_id }}"
          - "   ‚Ä¢ Total fields: {{ final_survey.json.spec | length }}"
          - "   ‚Ä¢ Domain choices: {{ (final_survey.json.spec | selectattr('variable', 'equalto', 'existing_domain') | first).choices | length }}"
          - "   ‚Ä¢ Record choices: {{ (final_survey.json.spec | selectattr('variable', 'equalto', 'existing_record') | first).choices | length }}"