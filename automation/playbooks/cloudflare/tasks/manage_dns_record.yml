---
# Manage DNS Records - Create/Update/Delete/Clone
# Required variables: zone_id, resolved_domain, fq_record_name, cf_action, record_type, record_value

- name: List all DNS records for this domain
  uri:
    url: "https://api.cloudflare.com/client/v4/zones/{{ zone_id }}/dns_records"
    method: GET
    headers:
      Authorization: "Bearer {{ lookup('env','CLOUDFLARE_API_TOKEN') }}"
    return_content: true
    validate_certs: "{{ cf_validate_certs | default(true) }}"
  register: all_records_lookup
  when: zone_id is defined and zone_id | length > 0

- name: Ensure record_id has a default
  set_fact:
    record_id: "{{ record_id | default('') }}"

- name: Set operation labels for job tracking
  set_fact:
    operation_label: >-
      {%- if cf_action == 'create_record' -%}
        CREATE
      {%- elif cf_action == 'update_record' -%}
        UPDATE
      {%- elif cf_action == 'delete_record' -%}
        DELETE
      {%- elif cf_action == 'clone_record' -%}
        CLONE
      {%- else -%}
        {{ cf_action | upper }}
      {%- endif -%}
    operation_description: >-
      {%- if cf_action == 'create_record' -%}
        Creating DNS record
      {%- elif cf_action == 'update_record' -%}
        Updating DNS record
      {%- elif cf_action == 'delete_record' -%}
        Deleting DNS record
      {%- elif cf_action == 'clone_record' -%}
        Cloning DNS record
      {%- else -%}
        {{ cf_action | replace('_', ' ') | title }}
      {%- endif -%}
  tags:
    - "{{ cf_action | default('unknown') }}"
    - "dns-record"
    - "{{ (cf_action + '_record') if cf_action in ['create', 'update', 'delete', 'clone'] else cf_action }}"

# ========================CLONE RECORD LOGIC=========================
- name: Auto-discover source domain and clone record
  when: cf_action == 'clone_record'
  block:
    - name: Determine source record name for discovery
      set_fact:
        source_record_name: >-
          {%- if existing_record is defined and (existing_record | trim) != '' and (existing_record | trim) != '[NONE]' and (existing_record | trim) != '[REFRESH_NEEDED]' -%}
            {{ existing_record | trim }}
          {%- elif record_value is defined and (record_value | trim) != '' and (existing_record | trim) == '[NONE]' -%}
            {{ record_value | trim }}
          {%- elif record_name is defined and (record_name | trim) != '' -%}
            {{ record_name | trim }}
          {%- else -%}
            {{ resolved_record_name }}
          {%- endif -%}
    
    - name: Display clone setup
      debug:
        msg:
          - "  STARTING AUTO-DISCOVERY CLONE:"
          - "  Looking for record: {{ source_record_name | default('undefined') }}"
          - "  Record type: {{ record_type | default('A') }}"
          - "  Target domain: {{ resolved_domain | default('undefined') }}"
    
    - name: Get all zones to find source domain
      uri:
        url: "https://api.cloudflare.com/client/v4/zones"
        method: GET
        headers:
          Authorization: "Bearer {{ lookup('env','CLOUDFLARE_API_TOKEN') }}"
        return_content: true
        validate_certs: "{{ cf_validate_certs | default(true) }}"
      register: all_zones_for_clone
      when: source_record_name is defined and source_record_name | length > 0

    - name: Search for record across all domains
      uri:
        url: "https://api.cloudflare.com/client/v4/zones/{{ item.id }}/dns_records?type={{ record_type | default('A') }}&name={{ source_fq_name }}"
        method: GET
        headers:
          Authorization: "Bearer {{ lookup('env','CLOUDFLARE_API_TOKEN') }}"
        return_content: true
        validate_certs: "{{ cf_validate_certs | default(true) }}"
      register: record_search_results
      loop: "{{ all_zones_for_clone.json.result | default([]) }}"
      vars:
        source_fq_name: >-
          {%- if source_record_name == '@' -%}
            {{ item.name }}
          {%- elif source_record_name | regex_search('\.' ~ item.name ~ '$') -%}
            {{ source_record_name }}
          {%- else -%}
            {{ source_record_name }}.{{ item.name }}
          {%- endif -%}
      when: 
        - all_zones_for_clone is defined
        - source_record_name is defined and source_record_name | length > 0
      failed_when: false

    - name: Find domain containing the record (prefer different domain than target)
      set_fact:
        source_domain: "{{ item.item.name }}"
        source_zone_id: "{{ item.item.id }}"
        found_source_record: "{{ item.json.result[0] if item.json.result | length > 0 else {} }}"
      loop: "{{ record_search_results.results | default([]) }}"
      when: 
        - record_search_results is defined
        - item.json is defined 
        - item.json.result | length > 0
        - item.item.name != resolved_domain  # Prefer source from different domain than target
      loop_control:
        loop_var: item

    - name: Fallback - use any domain if no different domain found
      set_fact:
        source_domain: "{{ item.item.name }}"
        source_zone_id: "{{ item.item.id }}"
        found_source_record: "{{ item.json.result[0] if item.json.result | length > 0 else {} }}"
      loop: "{{ record_search_results.results | default([]) }}"
      when: 
        - record_search_results is defined
        - item.json is defined 
        - item.json.result | length > 0
        - source_domain is not defined  # Only if we haven't found a source yet
      loop_control:
        loop_var: item

    - name: Validate clone prerequisites
      fail:
        msg: |
          CLONE OPERATION FAILED - SOURCE RECORD NOT FOUND!
          
          Searched for: {{ source_record_name }} ({{ record_type | default('A') }} record)
          Target domain: {{ resolved_domain }}
          
          The record '{{ source_record_name }}' was not found in any domain in your Cloudflare account.
          
          Please verify:
          1. The record name is correct
          2. The record type is correct  
          3. The record exists in source domain
      when: 
        - source_domain is not defined or source_domain | length == 0
        - source_record_name is defined and source_record_name | length > 0

    - name: Prevent cloning to identical record
      fail:
        msg: |
          CLONE OPERATION FAILED - CANNOT CLONE TO IDENTICAL RECORD!
          
          Source: {{ found_source_record.name | default('N/A') }} in {{ source_domain | default('N/A') }}
          Target: {{ fq_record_name }} in {{ resolved_domain }}
          
          Cannot clone a record to itself. The source and target are identical.
          
          Please either:
          1. Use a different target record name (new_record_name)
          2. Clone from a different source domain
      when: 
        - source_domain is defined
        - found_source_record is defined
        - found_source_record.name is defined
        - source_domain == resolved_domain
        - found_source_record.name == fq_record_name
      
    - name: Display successful auto-discovery
      debug:
        msg:
          - "  AUTO-DISCOVERY SUCCESSFUL!"
          - "  Source domain found: {{ source_domain | default('NOT FOUND') }}"
          - "  Source record: {{ found_source_record.name | default('N/A') }}"
          - "  Source content: {{ found_source_record.content | default('N/A') }}"
          - "  Target domain: {{ resolved_domain | default('undefined') }}"
          - "  Target record: {{ resolved_record_name | default('undefined') }}"
      when: source_domain is defined and source_domain | length > 0

    - name: Build source record name
      set_fact:
        source_fq_record_name: "{{ found_source_record.name | default('') }}"
      when: found_source_record is defined and found_source_record | length > 0

    - name: Build clone payload JSON
      set_fact:
        clone_payload_json: >-
          {{ ({'type': found_source_record.type | default(record_type),
               'name': fq_record_name,
               'content': (record_value if (record_value is defined and record_value | length > 0) else (found_source_record.content | default(''))),
               'ttl': (record_ttl | default(found_source_record.ttl | default(3600)) | int),
               'priority': found_source_record.priority | default(omit) }
             ) | combine({'proxied': (record_proxied | default(found_source_record.proxied | default(false)) | bool) } if (found_source_record.type | default(record_type)) in ['A','AAAA','CNAME'] else {})
             | to_json }}
      when: found_source_record is defined and found_source_record | length > 0

    - name: Display clone details
      debug:
        msg:
          - "  Cloning record from {{ source_domain | default(resolved_domain) }} to {{ resolved_domain }}"
          - "  Source: {{ source_fq_record_name }} ({{ found_source_record.type | default('N/A') }})"
          - "  Target: {{ fq_record_name }} ({{ found_source_record.type | default(record_type) }})"
          - "  Content: {{ found_source_record.content | default('N/A') }}"
          - "  TTL: {{ found_source_record.ttl | default(3600) }}"
          - "  Proxied: {{ found_source_record.proxied | default(false) }}"
      when: found_source_record is defined and found_source_record | length > 0

    - name: Write clone payload to temp file
      copy:
        content: "{{ clone_payload_json }}"
        dest: "/tmp/clone_payload_{{ inventory_hostname }}.json"
        mode: '0644'
      when: clone_payload_json is defined

    - name: Create cloned record
      uri:
        url: "https://api.cloudflare.com/client/v4/zones/{{ zone_id }}/dns_records"
        method: POST
        headers:
          Authorization: "Bearer {{ lookup('env','CLOUDFLARE_API_TOKEN') }}"
          Content-Type: "application/json"
        body_format: json
        body: "{{ lookup('file', '/tmp/clone_payload_' ~ inventory_hostname ~ '.json') | from_json }}"
        return_content: true
        validate_certs: "{{ cf_validate_certs | default(true) }}"
      register: clone_result
      when: clone_payload_json is defined

    - name: Track clone result
      debug:
        msg: "[{{ 'SUCCESS' if (clone_result.json.success | default(false)) else 'FAILED' }}] {{ operation_label }}: Cloned {{ found_source_record.type | default(record_type) }} record: {{ source_fq_record_name }} → {{ fq_record_name }}"
      when: clone_result is defined
      tags:
        - "{{ operation_label | lower }}"
        - "clone_record"
        - "dns-record"
        - "result-tracking"

    - name: Fail if clone operation failed
      fail:
        msg: |
          CLONE OPERATION FAILED!
          
          Error: {{ clone_result.json.errors[0].message | default('Unknown error') if clone_result.json.errors is defined else 'API request failed' }}
          Code: {{ clone_result.json.errors[0].code | default('N/A') if clone_result.json.errors is defined else 'N/A' }}
          
          Source: {{ source_fq_record_name }} ({{ found_source_record.type | default(record_type) }})
          Target: {{ fq_record_name }} ({{ found_source_record.type | default(record_type) }})
          
          Please check:
          1. Target record name doesn't already exist
          2. Record content is valid for the record type
          3. You have proper permissions for the target domain
      when: 
        - clone_result is defined
        - not (clone_result.json.success | default(false))

    - name: Set operation completed for clone
      set_fact:
        operation_completed: true
      when: 
        - clone_result is defined 
        - (clone_result.json.success | default(false) or clone_result.status is defined)

# ========================REGULAR RECORD OPERATIONS=========================
- name: Find existing record
  uri:
    url: "https://api.cloudflare.com/client/v4/zones/{{ zone_id }}/dns_records?{% if record_type is defined %}type={{ record_type }}&{% endif %}name={{ fq_record_name | urlencode }}"
    method: GET
    headers:
      Authorization: "Bearer {{ lookup('env','CLOUDFLARE_API_TOKEN') }}"
    return_content: true
    validate_certs: "{{ cf_validate_certs | default(true) }}"
  register: record_lookup
  when: 
    - (record_id is not defined or record_id == '') 
    - fq_record_name is defined and fq_record_name | length > 0
    - operation_completed is not defined or not operation_completed

- name: Set record_id from lookup
  set_fact:
    record_id: "{{ record_lookup.json.result[0].id }}"
  when: 
    - record_lookup is defined and record_lookup.json is defined and record_lookup.json.result|length > 0
    - operation_completed is not defined or not operation_completed

- name: Auto-convert create to update when record exists
  set_fact:
    cf_action: "update_record"
  when:
    - cf_action == 'create_record'
    - record_id is defined
    - record_id != ''
    - operation_completed is not defined or not operation_completed

- name: Build record payload JSON
  set_fact:
    record_payload_json: >-
      {{ ({ 'type': record_type,
            'name': ((fq_record_name if (fq_record_name is defined and fq_record_name|length > 0) else effective_record_name) | trim),
            'content': (( '"' ~ (record_value|default('') | replace('"','') | trim) ~ '"') if record_type == 'TXT' else (record_value|default(''))),
            'ttl': (numeric_ttl|int if numeric_ttl is defined else 3600) }
         )
         | combine({'proxied': (effective_proxied | default(false))} if record_type in ['A','AAAA','CNAME'] else {})
         | combine({'priority': (record_priority|int if record_priority is defined else 10)} if record_type in ['MX','SRV'] else {})
         | to_json }}
  when: 
    - record_type is defined 
    - cf_action in ['create_record','update_record']
    - operation_completed is not defined or not operation_completed

- name: Write record payload to temp file
  copy:
    content: "{{ record_payload_json }}"
    dest: "/tmp/record_payload_{{ inventory_hostname }}.json"
    mode: '0644'
  when: 
    - cf_action in ['create_record','update_record']
    - operation_completed is not defined or not operation_completed

- name: Validate CNAME target is not an IP address
  fail:
    msg: "CNAME record value looks like an IP ({{ record_value }}). CNAME must point to a hostname or FQDN. Use A/AAAA for IP addresses."
  when:
    - cf_action in ['create_record', 'update_record']
    - record_type is defined
    - record_type == 'CNAME'
    - record_value is defined
    - record_value is match('^\\d+\\.\\d+\\.\\d+\\.\\d+$')
    - operation_completed is not defined or not operation_completed

- name: Validate CNAME target does not reference itself
  fail:
    msg: |
      CNAME content cannot reference itself.
      Record name: {{ fq_record_name }}
      CNAME target: {{ record_value }}
      
      A CNAME record cannot point to itself or create a circular reference.
      Please use a different target hostname.
  when:
    - cf_action in ['create_record', 'update_record']
    - record_type is defined
    - record_type == 'CNAME'
    - record_value is defined
    - fq_record_name is defined
    - (record_value | lower | trim | regex_replace('\\.$', '')) == (fq_record_name | lower | trim | regex_replace('\\.$', ''))
    - operation_completed is not defined or not operation_completed

- name: Validate A record has valid IPv4 address
  fail:
    msg: |
      Content for A record must be a valid IPv4 address.
      Record type: A
      Content provided: {{ record_value }}
      
      A records must contain a valid IPv4 address (e.g., 203.0.113.10).
      If you want to point to a hostname, use a CNAME record instead.
  when:
    - cf_action in ['create_record', 'update_record']
    - record_type is defined
    - record_type == 'A'
    - record_value is defined
    - not (record_value | trim | regex_search('^[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}$'))
    - operation_completed is not defined or not operation_completed

- name: Validate AAAA record has valid IPv6 address
  fail:
    msg: |
      Content for AAAA record must be a valid IPv6 address.
      Record type: AAAA
      Content provided: {{ record_value }}
      
      AAAA records must contain a valid IPv6 address (e.g., 2001:0db8::1).
      If you want to point to a hostname, use a CNAME record instead.
  when:
    - cf_action in ['create_record', 'update_record']
    - record_type is defined
    - record_type == 'AAAA'
    - record_value is defined
    - not (record_value | trim | regex_search('^[0-9a-fA-F:]+$'))
    - operation_completed is not defined or not operation_completed

- name: Create or update record
  uri:
    url: >-
      https://api.cloudflare.com/client/v4/zones/{{ zone_id }}/dns_records{{ '/' ~ (record_id | default('')) if (record_id | default('')) != '' and cf_action == 'update_record' else '' }}
    method: "{{ 'PUT' if cf_action == 'update_record' and (record_id | default('')) != '' else 'POST' }}"
    headers:
      Authorization: "Bearer {{ lookup('env','CLOUDFLARE_API_TOKEN') }}"
      Content-Type: "application/json"
    body_format: json
    body: "{{ lookup('file', '/tmp/record_payload_' ~ inventory_hostname ~ '.json') | from_json }}"
    return_content: true
    validate_certs: "{{ cf_validate_certs | default(true) }}"
  when: 
    - cf_action in ['create_record','update_record']
    - operation_completed is not defined or not operation_completed
  register: record_result
  ignore_errors: yes

- name: Fallback to curl if uri failed
  shell: >-
    curl -sS -X {{ 'PUT' if cf_action == 'update_record' and (record_id | default('')) != '' else 'POST' }} 
    "https://api.cloudflare.com/client/v4/zones/{{ zone_id }}/dns_records{{ '/' ~ (record_id | default('')) if (record_id | default('')) != '' and cf_action == 'update_record' else '' }}" \
      -H "Authorization: Bearer {{ lookup('env','CLOUDFLARE_API_TOKEN') }}" \
      -H 'Content-Type: application/json' \
      --data-binary @/tmp/record_payload_{{ inventory_hostname }}.json
  args:
    executable: /bin/bash
  when: 
    - cf_action in ['create_record','update_record'] 
    - ((record_result is failed) or (record_result is defined and record_result.status is defined and record_result.status == -1))
    - operation_completed is not defined or not operation_completed
  register: record_curl_result

- name: Normalize curl result
  set_fact:
    record_result: "{{ {'json': (record_curl_result.stdout | default('') | from_json) if record_curl_result.stdout|length > 0 else {} } }}"
  when: 
    - record_curl_result is defined and record_curl_result.stdout is defined
    - operation_completed is not defined or not operation_completed

- name: Delete record
  when: 
    - cf_action == 'delete_record' 
    - record_id
    - operation_completed is not defined or not operation_completed
  uri:
    url: "https://api.cloudflare.com/client/v4/zones/{{ zone_id }}/dns_records/{{ record_id }}"
    method: DELETE
    headers:
      Authorization: "Bearer {{ lookup('env','CLOUDFLARE_API_TOKEN') }}"
    return_content: true
    validate_certs: "{{ cf_validate_certs | default(true) }}"
  register: delete_result

- name: Display operation result
  debug:
    msg: >-
      {% if cf_action in ['create_record','update_record'] %}
      {% set success = (record_result.json.success if (record_result is defined and record_result.json is defined and record_result.json.success is defined) else false) %}
      {% if success %}[SUCCESS] {{ operation_label }}: {{ fq_record_name }} ({{ record_type }}){% else %}[FAILED] {{ operation_label }}: {{ fq_record_name }} - {{ (record_result.json.errors | map(attribute='message') | join(', ') if (record_result is defined and record_result.json is defined and record_result.json.errors is defined) else 'Unknown error') }}{% endif %}
      {% elif cf_action == 'delete_record' %}
      {% set success = (delete_result.json.success if (delete_result is defined and delete_result.json is defined and delete_result.json.success is defined) else false) %}
      {% if success %}[SUCCESS] {{ operation_label }}: {{ fq_record_name }}{% if record_type is defined %} ({{ record_type }}){% endif %}{% else %}[FAILED] {{ operation_label }}: {{ fq_record_name }}{% endif %}
      {% endif %}
  tags:
    - "{{ operation_label | lower }}"
    - "{{ cf_action }}"
    - "dns-record"
    - "result-tracking"

- name: Track domain level changes
  set_fact:
    domain_changes: "{{ domain_changes + [{'action': cf_action, 'operation_label': operation_label, 'record': fq_record_name, 'type': record_type | default('ANY'), 'status': 'success' if (record_result.json.success | default(false) or delete_result.json.success | default(false)) else 'failed'}] }}"
  when: cf_action in ['create_record','update_record','delete_record']
  tags:
    - "{{ operation_label | lower }}"
    - "{{ cf_action }}"
    - "dns-record"
    - "change-tracking"
