---
- hosts: localhost
  connection: local
  gather_facts: false
  vars:
    cf_validate_certs: false
    domain_changes: []
    global_changes: []
    platform_changes: []
    
  tasks:
    # ======================VARIABLE RESOLUTION===================================
  
    - name: Resolve domain name from dropdown or manual entry
      set_fact:
        resolved_domain: >-
          {%- if existing_domain is defined and (existing_domain | trim) != '' and (existing_domain | trim) != '[MANUAL_ENTRY]' -%}
            {{ existing_domain | trim }}
          {%- elif domain is defined and (domain | trim) != '' -%}
            {{ domain | trim }}
          {%- else -%}
            
          {%- endif -%}

    - name: Resolve record name from dropdown or manual entry
      set_fact:
        resolved_record_name: >-
          {%- if existing_record is defined and (existing_record | trim) != '' and (existing_record | trim) != '[NONE]' -%}
            {{ existing_record | trim }}
          {%- elif record_name is defined and (record_name | trim) != '' -%}
            {{ record_name | trim }}
          {%- else -%}
            
          {%- endif -%}

    - name: Display action summary
      debug:
        msg:
          - "════════════════════════════════════════════════════════════════"
          - "  ACTION: {{ cf_action | upper | default('UNDEFINED') }}"
          - "  DOMAIN: {{ resolved_domain | default('undefined') }}"
          - "  RECORD: {{ resolved_record_name | default('none') }}"
          - "  TYPE: {{ record_type | default('n/a') }}"
          - "════════════════════════════════════════════════════════════════"

    # ========================CREATE DOMAIN (ZONE)=================================
 
    - name: Create Cloudflare zone
      when: cf_action == 'create_domain'
      block:
        - name: Create zone via API
          uri:
            url: "https://api.cloudflare.com/client/v4/zones"
            method: POST
            headers:
              Authorization: "Bearer {{ lookup('env','CLOUDFLARE_API_TOKEN') }}"
              Content-Type: "application/json"
            body_format: json
            body:
              name: "{{ resolved_domain }}"
              jump_start: true
            return_content: true
            validate_certs: "{{ cf_validate_certs | default(true) }}"
          register: create_zone_result

        - name: Track zone creation
          set_fact:
            domain_changes: "{{ domain_changes + [{'type': 'ZONE_CREATED', 'domain': resolved_domain, 'zone_id': create_zone_result.json.result.id | default('N/A'), 'status': 'SUCCESS' if create_zone_result.json.success else 'FAILED'}] }}"
          when: create_zone_result.json is defined

        - name: Display result
          debug:
            msg:
              - "New Cloudflare Zone Created"
              - "  Domain: {{ resolved_domain }}"
              - "  Zone ID: {{ create_zone_result.json.result.id | default('N/A') }}"
              - "  Status: {{ create_zone_result.json.result.status | default('N/A') }}"
          when: create_zone_result.json.success | default(false)

    # ====================STANDARDIZE DOMAIN SETTINGS==============================

    - name: Apply standard zone settings
      when: 
        - cf_action in ['create_domain', 'standardize', 'sync', 'create_record']
        - resolved_domain is defined
        - resolved_domain != 'undefined'
        - resolved_domain | length > 0
      block:
        - name: Get zone ID
          uri:
            url: "https://api.cloudflare.com/client/v4/zones?name={{ resolved_domain }}"
            method: GET
            headers:
              Authorization: "Bearer {{ lookup('env','CLOUDFLARE_API_TOKEN') }}"
            return_content: true
            validate_certs: "{{ cf_validate_certs | default(true) }}"
          check_mode: false
          register: zone_lookup
          
        - name: Set zone_id
          set_fact:
            zone_id: >-
              {{ (zone_lookup.json.result[0].id) if (zone_lookup is defined and zone_lookup.json is defined and zone_lookup.json.result is defined and zone_lookup.json.result|length > 0) else '' }}

        - name: Apply zone settings
          include_tasks: "tasks/apply_zone_settings.yml"
          when: zone_id is defined and zone_id | length > 0

    # ======================UPDATE SETTINGS (ZONE/RECORD/ACCOUNT LEVEL)============

    - name: Update settings at different levels
      when:
        - cf_action == 'update_settings'
        - settings_level is defined
      block:
        - name: Get zone ID
          uri:
            url: "https://api.cloudflare.com/client/v4/zones?name={{ resolved_domain }}"
            method: GET
            headers:
              Authorization: "Bearer {{ lookup('env','CLOUDFLARE_API_TOKEN') }}"
            return_content: true
            validate_certs: "{{ cf_validate_certs | default(true) }}"
          register: zone_lookup
          check_mode: false

        - name: Set zone_id
          set_fact:
            zone_id: "{{ zone_lookup.json.result[0].id }}"
          when: zone_lookup.json.result|length > 0

        - name: Update zone-level settings
          include_tasks: "tasks/update_zone_settings.yml"
          when: settings_level == 'zone'

        - name: Update record-level settings
          include_tasks: "tasks/update_record_settings.yml"
          when: settings_level == 'record'

        - name: Handle account-level settings
          when: settings_level == 'account'
          block:
            - name: Display account settings info
              debug:
                msg:
                  - "Account-level settings management"
                  - "  Note: Requires specific API endpoints per setting type"
                  - "  Examples: Billing, subscriptions, account members"

            - name: Track account operation
              set_fact:
                platform_changes: "{{ platform_changes + [{'type': 'ACCOUNT_SETTINGS_INFO', 'message': 'Account level settings require specific implementation per setting type'}] }}"

    # ======================MANAGE DNS RECORDS=====================================
  
    - name: Manage DNS records
      when: 
        - cf_action in ['create_record', 'update_record', 'delete_record', 'clone_record']
        - resolved_domain is defined
        - resolved_domain != 'undefined'
        - resolved_domain | length > 0
      block:
        - name: Get zone ID
          uri:
            url: "https://api.cloudflare.com/client/v4/zones?name={{ resolved_domain }}"
            method: GET
            headers:
              Authorization: "Bearer {{ lookup('env','CLOUDFLARE_API_TOKEN') }}"
            return_content: true
            validate_certs: "{{ cf_validate_certs | default(true) }}"
          register: zone_lookup
          
        - name: Set zone_id
          set_fact:
            zone_id: >-
              {{ (zone_lookup.json.result[0].id) if (zone_lookup is defined and zone_lookup.json is defined and zone_lookup.json.result is defined and zone_lookup.json.result|length > 0) else '' }}

        - name: Apply modern Cloudflare rules
          when:
            - cf_action in ['create_domain', 'create_record', 'update_record', 'clone_record']
            - zone_id is defined and zone_id | length > 0
          block:
            - name: Set default rule action
              set_fact:
                survey_rule_action: "{{ rule_action | default('all') }}"

            - name: Expand rule actions list
              set_fact:
                rule_actions_to_apply: "{{ ['force_https', 'redirect_to_www', 'cache_level', 'edge_cache_ttl', 'argo_smart_routing', 'cache_everything', 'browser_cache_ttl'] if survey_rule_action == 'all' else ([survey_rule_action] if survey_rule_action != 'none' else []) }}"

            - name: Apply each rule
              include_tasks: "tasks/apply_single_modern_rule.yml"
              loop: "{{ rule_actions_to_apply }}"
              loop_control:
                loop_var: current_rule_action
              vars:
                domain: "{{ resolved_domain }}"
              when: rule_actions_to_apply | length > 0

        - name: Prepare record variables
          set_fact:
            effective_record_name: "{{ resolved_record_name | default('') | trim | replace('\"','') | replace(\"'\",'') | regex_replace('\\s+',' ') }}"

        - name: Build fully-qualified record name
          set_fact:
            fq_record_name: >-
              {%- if effective_record_name is defined and effective_record_name | length > 0 -%}
              {%- if effective_record_name | regex_search('\.' ~ resolved_domain ~ '$') -%}
              {{ effective_record_name | trim }}
              {%- elif effective_record_name == '@' -%}
              {{ resolved_domain }}
              {%- else -%}
              {{ (effective_record_name | trim) ~ '.' ~ resolved_domain }}
              {%- endif -%}
              {%- else -%}
              
              {%- endif -%}

        - name: Set TTL and proxied defaults
          set_fact:
            numeric_ttl: "{{ global_ttl | default(3600) | int }}"
            effective_proxied: "{{ record_proxied | default(proxied | default(global_proxied | default(false))) | bool }}"

        - name: Execute DNS record operation
          include_tasks: "tasks/manage_dns_record.yml"

    # =======================SYNC PLATFORM RECORDS=================================

    - name: Sync standard records across all zones
      when: cf_action == 'sync'
      block:
        - name: Get all zones
          uri:
            url: "https://api.cloudflare.com/client/v4/zones"
            method: GET
            headers:
              Authorization: "Bearer {{ lookup('env','CLOUDFLARE_API_TOKEN') }}"
            return_content: true
            validate_certs: "{{ cf_validate_certs | default(true) }}"
          register: all_zones
          
        - name: Apply standard records to each zone
          include_tasks: apply-standard-records.yml
          loop: "{{ all_zones.json.result }}"
          loop_control:
            loop_var: zone

        - name: Display sync result
          debug:
            msg: "[SUCCESS] Platform sync completed - {{ (standard_records | default([]) | length) }} record types applied"

    # ========================OUTPUT SUMMARIES=====================================

    - name: Display zone configuration summary
      when: resolved_domain is defined and resolved_domain|length > 0
      debug:
        msg: "Domain: {{ resolved_domain }} | Zone ID: {{ zone_id | default('N/A') }} | Rules: {{ rule_actions_to_apply | default([]) | length }}"

    - name: Display execution summary
      debug:
        msg: |
          
          ============================================================
          CLOUDFLARE AUTOMATION - EXECUTION SUMMARY
          ============================================================
          
          Action: {{ cf_action | upper | default('NONE') }}
          Domain: {{ resolved_domain | default('N/A') }}
          {% if settings_level is defined %}Settings Level: {{ settings_level | upper }}{% endif %}
          
          [DOMAIN LEVEL] Changes: {{ domain_changes | length }} operation(s)
          {% for change in domain_changes %}
            - {{ change.get('status', 'unknown') | upper }}: {{ change.get('action', 'undefined') | replace('_', ' ') | title }} - {{ change.get('record', 'N/A') }} ({{ change.get('type', 'N/A') }})
          {% else %}
            - No domain-level changes
          {% endfor %}
          
          [GLOBAL LEVEL] Changes: {{ global_changes | length }} setting(s)
          {% for change in global_changes %}
            - {{ change.get('status', 'unknown') | upper }}: {{ change.get('setting', 'undefined') }} = {{ change.get('value', 'N/A') }}
          {% else %}
            - No global-level changes
          {% endfor %}
          
          [PLATFORM LEVEL] Changes: {{ platform_changes | length }} operation(s)
          {% for change in platform_changes %}
            - {{ change.get('status', 'unknown') | upper }}: {{ change.get('action', 'undefined') }}
          {% else %}
            - No platform-level changes
          {% endfor %}
          
          ============================================================

    # ========================AUTO-UPDATE AWX SURVEY DROPDOWNS=====================
    - name: Update AWX survey dropdowns
      shell: "{{ playbook_dir }}/../../scripts/update_awx_survey_dropdowns.sh"
      environment:
        CLOUDFLARE_API_TOKEN: "{{ lookup('env','CLOUDFLARE_API_TOKEN') }}"
        AWX_HOST: "{{ lookup('env','AWX_HOST') | default('localhost:8052', true) }}"
        AWX_JOB_TEMPLATE_ID: "{{ lookup('env','AWX_JOB_TEMPLATE_ID') | default('21', true) }}"
      when: 
        - cf_action in ['create_domain', 'create_record']
        - auto_update_survey | default(true) | bool
      ignore_errors: yes
      failed_when: false
      register: survey_update_result

    - name: Display survey update result
      debug:
        msg: "AWX survey dropdowns automatically refreshed with latest Cloudflare data"
      when: 
        - survey_update_result is defined
        - survey_update_result.rc is defined
        - survey_update_result.rc == 0
