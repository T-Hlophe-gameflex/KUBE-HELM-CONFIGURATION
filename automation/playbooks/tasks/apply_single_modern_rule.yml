---
# Apply a single modern Cloudflare rule
# This task file is called from the main playbook when applying rules
# Variables needed: current_rule_action, zone_id, domain

- name: Set rule_action variable for template rendering
  set_fact:
    rule_action: "{{ current_rule_action }}"

- name: Generate rule configuration from template for {{ current_rule_action }}
  set_fact:
    rule_payload: "{{ lookup('template', '../../templates/cloudflare_modern_rules.j2') | from_json }}"

- name: Determine appropriate ruleset phase based on rule action
  set_fact:
    ruleset_phase: >-
      {% if current_rule_action in ['force_https', 'redirect_to_www', 'redirect_from_www'] %}http_request_dynamic_redirect
      {% elif current_rule_action in ['cache_everything', 'browser_cache_ttl'] %}http_request_cache_settings
      {% else %}http_request_transform{% endif %}

- name: Get existing rulesets for this zone
  uri:
    url: "https://api.cloudflare.com/client/v4/zones/{{ zone_id }}/rulesets"
    method: GET
    headers:
      Authorization: "Bearer {{ lookup('env','CLOUDFLARE_API_TOKEN') }}"
      Content-Type: "application/json"
    return_content: true
    validate_certs: "{{ cf_validate_certs | default(true) }}"
  register: rulesets_lookup
  ignore_errors: yes

- name: Find existing ruleset for the appropriate phase
  set_fact:
    existing_ruleset: >-
      {% if rulesets_lookup is defined and rulesets_lookup.json is defined and rulesets_lookup.json.result is defined %}
        {% set matching_rulesets = rulesets_lookup.json.result | selectattr('phase', 'equalto', ruleset_phase) | list %}
        {% if matching_rulesets | length > 0 %}{{ matching_rulesets[0] | to_json }}{% else %}{}{% endif %}
      {% else %}{}{% endif %}
    ruleset_id: >-
      {% if rulesets_lookup is defined and rulesets_lookup.json is defined and rulesets_lookup.json.result is defined %}
        {% set matching_rulesets = rulesets_lookup.json.result | selectattr('phase', 'equalto', ruleset_phase) | list %}
        {% if matching_rulesets | length > 0 %}{{ matching_rulesets[0].id }}{% else %}create_new{% endif %}
      {% else %}create_new{% endif %}

- name: Create new ruleset if none exists for this phase ({{ current_rule_action }})
  uri:
    url: "https://api.cloudflare.com/client/v4/zones/{{ zone_id }}/rulesets"
    method: POST
    headers:
      Authorization: "Bearer {{ lookup('env','CLOUDFLARE_API_TOKEN') }}"
      Content-Type: "application/json"
    body_format: json
    body:
      name: "Zone {{ ruleset_phase | replace('_', ' ') | title }} Rules"
      kind: "zone"
      phase: "{{ ruleset_phase }}"
      rules: []
    return_content: true
    validate_certs: "{{ cf_validate_certs | default(true) }}"
  when: ruleset_id == 'create_new'
  register: new_ruleset
  ignore_errors: yes

- name: Update ruleset_id if new one was created
  set_fact:
    ruleset_id: "{{ new_ruleset.json.result.id }}"
  when: 
    - new_ruleset is defined 
    - new_ruleset.json is defined 
    - new_ruleset.json.result is defined
    - new_ruleset.json.result.id is defined

- name: Add rule to the ruleset ({{ current_rule_action }})
  uri:
    url: "https://api.cloudflare.com/client/v4/zones/{{ zone_id }}/rulesets/{{ ruleset_id }}/rules"
    method: POST
    headers:
      Authorization: "Bearer {{ lookup('env','CLOUDFLARE_API_TOKEN') }}"
      Content-Type: "application/json"
    body_format: json
    body: "{{ rule_payload }}"
    return_content: true
    validate_certs: "{{ cf_validate_certs | default(true) }}"
  when: 
    - ruleset_id is defined
    - ruleset_id != 'create_new'
    - rule_payload is defined
    - rule_payload.error is not defined
  register: rule_create_result
  ignore_errors: yes

- name: "[DOMAIN LEVEL] Modern rule: {{ current_rule_action }}"
  debug:
    msg: >-
      {% if rule_create_result is defined and rule_create_result.json is defined and rule_create_result.json.success | default(false) %}
      [SUCCESS] Modern Cloudflare Rule created
        Action: {{ current_rule_action }}
        Phase: {{ ruleset_phase }}
        Ruleset ID: {{ ruleset_id }}
        Rule ID: {{ rule_create_result.json.result.id | default('N/A') }}
        Description: {{ rule_payload.description | default('N/A') }}
      {% elif rule_create_result is defined and rule_create_result.json is defined and not (rule_create_result.json.success | default(false)) %}
      [FAILED] Modern Rule creation failed
        Action: {{ current_rule_action }}
        Errors: {{ rule_create_result.json.errors | default([]) | map(attribute='message') | join(', ') }}
      {% elif rule_payload is defined and rule_payload.error is defined %}
      [ERROR] Rule template error: {{ rule_payload.error }}
      {% else %}
      [SKIPPED] Rule creation skipped (zone_id: {{ zone_id | default('missing') }}, rule_action: {{ current_rule_action | default('missing') }})
      {% endif %}

