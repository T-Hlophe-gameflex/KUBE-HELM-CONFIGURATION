---
---
- name: Bootstrap AWX Cloudflare templates
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    awx_url: "{{ lookup('env','AWX_URL') | default('http://127.0.0.1:8052') }}"
    awx_token: "{{ lookup('env','AWX_TOKEN') | default('') }}"
    awx_project_id: "{{ lookup('env','AWX_PROJECT_ID') | default('1') }}"
    awx_inventory_id: "{{ lookup('env','AWX_INVENTORY_ID') | default('1') }}"
    cf_credential_id: "{{ lookup('env','CF_CREDENTIAL_ID') | default('') }}"

  tasks:
    - name: Assert AWX_TOKEN provided
      ansible.builtin.assert:
        that:
          - awx_token != ''
        fail_msg: "Set AWX_TOKEN in env to run this playbook"

    - name: Set AWX headers
      set_fact:
        awx_headers:
          Authorization: "Bearer {{ awx_token }}"
        ---
        - name: Bootstrap AWX Cloudflare templates
          hosts: localhost
          connection: local
          gather_facts: false
          vars:
            awx_url: "{{ lookup('env','AWX_URL') | default('http://127.0.0.1:8052') }}"
            awx_token: "{{ lookup('env','AWX_TOKEN') | default('') }}"
            awx_project_id: "{{ lookup('env','AWX_PROJECT_ID') | default('1') }}"
            awx_inventory_id: "{{ lookup('env','AWX_INVENTORY_ID') | default('1') }}"
          tasks:
            - name: Bootstrap: require AWX_TOKEN
              assert:
                that:
                  - awx_token != ''
                fail_msg: "Set AWX_TOKEN in env to run this playbook"

            - name: Bootstrap: headers
              set_fact:
                awx_headers:
                  Authorization: "Bearer {{ awx_token }}"
                  Content-Type: "application/json"

            - name: Bootstrap: ensure Manage Domain exists
              uri:
                url: "{{ awx_url }}/api/v2/job_templates/?name=Manage%20Domain%20(Cloudflare)"
                method: GET
                headers: "{{ awx_headers }}"
                return_content: yes
              register: jt_check_manage_domain
              failed_when: false

            - name: Bootstrap: create Manage Domain if missing
              uri:
                url: "{{ awx_url }}/api/v2/job_templates/"
                method: POST
                headers: "{{ awx_headers }}"
                body: >
                  {
                    "name": "Manage Domain (Cloudflare)",
                    "description": "Manage Cloudflare domain-level settings and records",
                    "job_type": "run",
                    "inventory": {{ awx_inventory_id }},
                    "project": {{ awx_project_id }},
                    "playbook": "automation/playbooks/cloudflare/wrapper-manage-record.yml",
                    "ask_variables_on_launch": false
                  }
                status_code: 201
                return_content: yes
              when: jt_check_manage_domain.json.count|int == 0
              register: created_manage_domain_response
              failed_when: false

            - name: Bootstrap: ensure Manage Record exists
              uri:
                url: "{{ awx_url }}/api/v2/job_templates/?name=Manage%20Record%20(Cloudflare)"
                method: GET
                headers: "{{ awx_headers }}"
                return_content: yes
              register: jt_check_manage_record
              failed_when: false

            - name: Bootstrap: create Manage Record if missing
              uri:
                url: "{{ awx_url }}/api/v2/job_templates/"
                method: POST
                headers: "{{ awx_headers }}"
                body: >
                  {
                    "name": "Manage Record (Cloudflare)",
                    "description": "Create/Update/Delete DNS records",
                    "job_type": "run",
                    "inventory": {{ awx_inventory_id }},
                    "project": {{ awx_project_id }},
                    "playbook": "automation/playbooks/cloudflare/wrapper-manage-record.yml",
                    "ask_variables_on_launch": false
                  }
                status_code: 201
                return_content: yes
              when: jt_check_manage_record.json.count|int == 0
              register: created_manage_record_response
              failed_when: false

            - name: Bootstrap: lookup Cloudflare credential
              uri:
                url: "{{ awx_url }}/api/v2/credentials/?name=Cloudflare%20API%20Token"
                method: GET
                headers: "{{ awx_headers }}"
                return_content: yes
              register: cred_lookup
              failed_when: false

            - name: Bootstrap: resolve credential id
              set_fact:
                final_cf_credential_id: >-
                  {{ cf_credential_id if (cf_credential_id != '') else (cred_lookup.json.results[0].id if (cred_lookup.json.count|int) > 0 else '') }}

            - name: Bootstrap: resolve template ids
              set_fact:
                manage_record_template_id: >-
                  {{ (jt_check_manage_record.json.results[0].id if (jt_check_manage_record.json.count|int) > 0 else (created_manage_record_response.json.id if (created_manage_record_response is defined) else '')) }}
                manage_domain_template_id: >-
                  {{ (jt_check_manage_domain.json.results[0].id if (jt_check_manage_domain.json.count|int) > 0 else (created_manage_domain_response.json.id if (created_manage_domain_response is defined) else '')) }}

            - name: Bootstrap: attach credential when available
              when: final_cf_credential_id is defined and final_cf_credential_id != ''
              uri:
                url: "{{ awx_url }}/api/v2/job_templates/{{ item }}/"
                method: PATCH
                headers: "{{ awx_headers }}"
                body: "{{ {'credential': (final_cf_credential_id|int)} | to_json }}"
                status_code: 200
                return_content: yes
              loop:
                - "{{ manage_record_template_id }}"
                - "{{ manage_domain_template_id }}"
              failed_when: false

            - name: Bootstrap: ensure survey when no credential
              when: final_cf_credential_id == '' or final_cf_credential_id is not defined
              block:
                - name: Build minimal CF token survey spec
                  set_fact:
                    minimal_cf_survey:
                      - question_name: "cloudflare_token"
                        question_description: "Provide a Cloudflare API token for this run (optional)"
                        required: false
                        answer_variable_name: "CLOUDFLARE_API_TOKEN"
                        type: "password"
                        choices: []

                - name: Patch Manage Record template with survey
                  uri:
                    url: "{{ awx_url }}/api/v2/job_templates/{{ manage_record_template_id }}/"
                    method: PATCH
                    headers: "{{ awx_headers }}"
                    body: "{{ {'survey_enabled': True, 'survey_spec': minimal_cf_survey} | to_json }}"
                    status_code: 200
                    return_content: yes
                  failed_when: false

            - name: Bootstrap: summary
              debug:
                msg:
                  - "Manage Record present: {{ (jt_check_manage_record.json.count|int) > 0 or (created_manage_record_response is defined) }}"
                  - "Manage Domain present: {{ (jt_check_manage_domain.json.count|int) > 0 or (created_manage_domain_response is defined) }}"
                  - "CF credential attached: {{ final_cf_credential_id is defined and final_cf_credential_id != '' }}"
                  - "CF credential attached: {{ final_cf_credential_id is defined and final_cf_credential_id != '' }}"
                fail_msg: "Set AWX_TOKEN in env to run this playbook"

            - name: Set AWX headers
              set_fact:
                awx_headers:
                  Authorization: "Bearer {{ awx_token }}"
                  Content-Type: "application/json"

            - name: Ensure Manage Domain exists (GET)
              uri:
                url: "{{ awx_url }}/api/v2/job_templates/?name=Manage%20Domain%20(Cloudflare)"
                ---
                - name: Bootstrap AWX Cloudflare templates
                  hosts: localhost
                  connection: local
                  gather_facts: false
                  vars:
                    awx_url: "{{ lookup('env','AWX_URL') | default('http://127.0.0.1:8052') }}"
                    awx_token: "{{ lookup('env','AWX_TOKEN') | default('') }}"
                    awx_project_id: "{{ lookup('env','AWX_PROJECT_ID') | default('1') }}"
                    awx_inventory_id: "{{ lookup('env','AWX_INVENTORY_ID') | default('1') }}"
                    cf_credential_id: "{{ lookup('env','CF_CREDENTIAL_ID') | default('') }}"

                  tasks:
                    - name: Assert AWX_TOKEN provided
                      ansible.builtin.assert:
                        that:
                          - awx_token != ''
                        fail_msg: "Set AWX_TOKEN in env to run this playbook"

                    - name: Set AWX headers
                      set_fact:
                        awx_headers:
                          Authorization: "Bearer {{ awx_token }}"
                          Content-Type: "application/json"

                    - name: Ensure Manage Domain exists (GET)
                      uri:
                        url: "{{ awx_url }}/api/v2/job_templates/?name=Manage%20Domain%20(Cloudflare)"
                        method: GET
                        headers: "{{ awx_headers }}"
                        return_content: yes
                      register: jt_check_manage_domain
                      failed_when: false

                    - name: Create Manage Domain when missing (POST)
                      uri:
                        url: "{{ awx_url }}/api/v2/job_templates/"
                        method: POST
                        headers: "{{ awx_headers }}"
                        body: >
                          {
                            "name": "Manage Domain (Cloudflare)",
                            "description": "Manage Cloudflare domain-level settings and records",
                            "job_type": "run",
                            "inventory": {{ awx_inventory_id }},
                            "project": {{ awx_project_id }},
                            "playbook": "automation/playbooks/cloudflare/wrapper-manage-record.yml",
                            "ask_variables_on_launch": false
                          }
                        status_code: 201
                        return_content: yes
                      when: jt_check_manage_domain.json.count|int == 0
                      register: created_manage_domain_response
                      failed_when: false

                    - name: Ensure Manage Record exists (GET)
                      uri:
                        url: "{{ awx_url }}/api/v2/job_templates/?name=Manage%20Record%20(Cloudflare)"
                        method: GET
                        headers: "{{ awx_headers }}"
                        return_content: yes
                      register: jt_check_manage_record
                      failed_when: false

                    - name: Create Manage Record when missing (POST)
                      uri:
                        url: "{{ awx_url }}/api/v2/job_templates/"
                        method: POST
                        headers: "{{ awx_headers }}"
                        body: >
                          {
                            "name": "Manage Record (Cloudflare)",
                            "description": "Create/Update/Delete DNS records",
                            "job_type": "run",
                            "inventory": {{ awx_inventory_id }},
                            "project": {{ awx_project_id }},
                            "playbook": "automation/playbooks/cloudflare/wrapper-manage-record.yml",
                            "ask_variables_on_launch": false
                          }
                        status_code: 201
                        return_content: yes
                      when: jt_check_manage_record.json.count|int == 0
                      register: created_manage_record_response
                      failed_when: false

                    - name: Lookup Cloudflare credential by name
                      uri:
                        url: "{{ awx_url }}/api/v2/credentials/?name=Cloudflare%20API%20Token"
                        method: GET
                        headers: "{{ awx_headers }}"
                        return_content: yes
                      register: cred_lookup
                      failed_when: false

                    - name: Resolve final credential id
                      set_fact:
                        final_cf_credential_id: >-
                          {{ cf_credential_id if (cf_credential_id != '') else (cred_lookup.json.results[0].id if (cred_lookup.json.count|int) > 0 else '') }}

                    - name: Resolve template ids
                      set_fact:
                        manage_record_template_id: >-
                          {{ (jt_check_manage_record.json.results[0].id if (jt_check_manage_record.json.count|int) > 0 else (created_manage_record_response.json.id if (created_manage_record_response is defined) else '')) }}
                        manage_domain_template_id: >-
                          {{ (jt_check_manage_domain.json.results[0].id if (jt_check_manage_domain.json.count|int) > 0 else (created_manage_domain_response.json.id if (created_manage_domain_response is defined) else '')) }}

                    - name: Attach credential to Job Templates when available
                      when: final_cf_credential_id is defined and final_cf_credential_id != ''
                      uri:
                        url: "{{ awx_url }}/api/v2/job_templates/{{ item }}/"
                        method: PATCH
                        headers: "{{ awx_headers }}"
                        body: "{{ {'credential': (final_cf_credential_id|int)} | to_json }}"
                        status_code: 200
                        return_content: yes
                      loop:
                        - "{{ manage_record_template_id }}"
                        - "{{ manage_domain_template_id }}"
                      failed_when: false

                    - name: Patch Manage Record to request token via survey when credential missing
                      when: final_cf_credential_id == '' or final_cf_credential_id is not defined
                      block:
                        - name: Build minimal CF token survey spec
                          set_fact:
                            minimal_cf_survey:
                              - question_name: "cloudflare_token"
                                question_description: "Provide a Cloudflare API token for this run (optional)"
                                required: false
                                answer_variable_name: "CLOUDFLARE_API_TOKEN"
                                type: "password"
                                choices: []

                        - name: Patch Manage Record template with survey
                          uri:
                            url: "{{ awx_url }}/api/v2/job_templates/{{ manage_record_template_id }}/"
                            method: PATCH
                            headers: "{{ awx_headers }}"
                            body: "{{ {'survey_enabled': True, 'survey_spec': minimal_cf_survey} | to_json }}"
                            status_code: 200
                            return_content: yes
                          failed_when: false

                    - name: Bootstrap summary
                      debug:
                        msg:
                          - "manage_record_present: {{ (jt_check_manage_record.json.count|int) > 0 or (created_manage_record_response is defined) }}"
                          - "manage_domain_present: {{ (jt_check_manage_domain.json.count|int) > 0 or (created_manage_domain_response is defined) }}"
                          - "cf_credential_attached: {{ final_cf_credential_id is defined and final_cf_credential_id != '' }}"

    - name: Resolve final credential id
      set_fact:
        final_cf_credential_id: >-
          {{ cf_credential_id if (cf_credential_id != '') else (cred_lookup.json.results[0].id if (cred_lookup.json.count|int) > 0 else '') }}

    - name: Resolve template ids
      set_fact:
        manage_record_template_id: >-
          {{ (jt_check_manage_record.json.results[0].id if (jt_check_manage_record.json.count|int) > 0 else (created_manage_record_response.json.id if (created_manage_record_response is defined) else '')) }}
        manage_domain_template_id: >-
          {{ (jt_check_manage_domain.json.results[0].id if (jt_check_manage_domain.json.count|int) > 0 else (created_manage_domain_response.json.id if (created_manage_domain_response is defined) else '')) }}

    - name: Attach credential to Job Templates when available
      when: final_cf_credential_id is defined and final_cf_credential_id != ''
      uri:
        url: "{{ awx_url }}/api/v2/job_templates/{{ item }}/"
        method: PATCH
        headers: "{{ awx_headers }}"
        body: "{{ {'credential': (final_cf_credential_id|int)} | to_json }}"
        status_code: 200
        return_content: yes
      loop:
        - "{{ manage_record_template_id }}"
        - "{{ manage_domain_template_id }}"
      failed_when: false

    - name: Patch Manage Record to request token via survey when credential missing
      when: final_cf_credential_id == '' or final_cf_credential_id is not defined
      block:
        - name: Build minimal CF token survey spec
          set_fact:
            minimal_cf_survey:
              - question_name: "cloudflare_token"
                question_description: "Provide a Cloudflare API token for this run (optional)"
                required: false
                answer_variable_name: "CLOUDFLARE_API_TOKEN"
                type: "password"
                choices: []

        - name: Patch Manage Record template with survey
          uri:
            url: "{{ awx_url }}/api/v2/job_templates/{{ manage_record_template_id }}/"
            method: PATCH
            headers: "{{ awx_headers }}"
            body: "{{ {'survey_enabled': True, 'survey_spec': minimal_cf_survey} | to_json }}"
            status_code: 200
            return_content: yes
          failed_when: false

    - name: Bootstrap summary
      debug:
        msg:
          - "manage_record_present: {{ (jt_check_manage_record.json.count|int) > 0 or (created_manage_record_response is defined) }}"
          - "manage_domain_present: {{ (jt_check_manage_domain.json.count|int) > 0 or (created_manage_domain_response is defined) }}"
          - "cf_credential_attached: {{ final_cf_credential_id is defined and final_cf_credential_id != '' }}"

      - name: Create Manage Domain when missing
        uri:
          url: "{{ awx_url }}/api/v2/job_templates/"
          method: POST
          headers: "{{ awx_headers }}"
          body: >
            {
              "name": "Manage Domain (Cloudflare)",
              "description": "Manage Cloudflare domain-level settings and records",
              "job_type": "run",
              "inventory": {{ awx_inventory_id }},
              "project": {{ awx_project_id }},
              "playbook": "automation/playbooks/cloudflare/wrapper-manage-record.yml",
              "ask_variables_on_launch": false
            }
          status_code: 201
          return_content: yes
        when: jt_check_manage_domain.json.count|int == 0
        register: created_manage_domain_response
        failed_when: false

      - name: Ensure Manage Record exists (GET)
        uri:
          url: "{{ awx_url }}/api/v2/job_templates/?name=Manage%20Record%20(Cloudflare)"
          method: GET
          headers: "{{ awx_headers }}"
          return_content: yes
        register: jt_check_manage_record
        failed_when: false

      - name: Create Manage Record when missing
        uri:
          url: "{{ awx_url }}/api/v2/job_templates/"
          method: POST
          headers: "{{ awx_headers }}"
          body: >
            {
              "name": "Manage Record (Cloudflare)",
              "description": "Create/Update/Delete DNS records",
              "job_type": "run",
              "inventory": {{ awx_inventory_id }},
              "project": {{ awx_project_id }},
              "playbook": "automation/playbooks/cloudflare/wrapper-manage-record.yml",
              "ask_variables_on_launch": false
            }
          status_code: 201
          return_content: yes
        when: jt_check_manage_record.json.count|int == 0
        register: created_manage_record_response
        failed_when: false

      - name: Lookup Cloudflare credential by name
        uri:
          url: "{{ awx_url }}/api/v2/credentials/?name=Cloudflare%20API%20Token"
          method: GET
          headers: "{{ awx_headers }}"
          return_content: yes
        register: cred_lookup
        failed_when: false

      - name: Resolve final credential id
        set_fact:
          final_cf_credential_id: >-
            {{ cf_credential_id if (cf_credential_id != '') else (cred_lookup.json.results[0].id if (cred_lookup.json.count|int) > 0 else '') }}

      - name: Resolve template ids
        set_fact:
          manage_record_template_id: >-
            {{ (jt_check_manage_record.json.results[0].id if (jt_check_manage_record.json.count|int) > 0 else (created_manage_record_response.json.id if (created_manage_record_response is defined) else '')) }}
          manage_domain_template_id: >-
            {{ (jt_check_manage_domain.json.results[0].id if (jt_check_manage_domain.json.count|int) > 0 else (created_manage_domain_response.json.id if (created_manage_domain_response is defined) else '')) }}

      - name: Attach credential to Job Templates when available
        when: final_cf_credential_id is defined and final_cf_credential_id != ''
        uri:
          url: "{{ awx_url }}/api/v2/job_templates/{{ item }}/"
          method: PATCH
          headers: "{{ awx_headers }}"
          body: "{{ {'credential': (final_cf_credential_id|int)} | to_json }}"
          status_code: 200
          return_content: yes
        loop:
          - "{{ manage_record_template_id }}"
          - "{{ manage_domain_template_id }}"
        failed_when: false

      - name: Patch Manage Record to ask for token via survey when credential missing
        when: final_cf_credential_id == '' or final_cf_credential_id is not defined
        block:
          - name: Build minimal CF token survey spec
            set_fact:
              minimal_cf_survey:
                - question_name: "cloudflare_token"
                  question_description: "Provide a Cloudflare API token for this run (optional)"
                  required: false
                  answer_variable_name: "CLOUDFLARE_API_TOKEN"
                  type: "password"
                  choices: []

          - name: Patch Manage Record template with survey
            uri:
              url: "{{ awx_url }}/api/v2/job_templates/{{ manage_record_template_id }}/"
              method: PATCH
              headers: "{{ awx_headers }}"
              body: "{{ {'survey_enabled': True, 'survey_spec': minimal_cf_survey} | to_json }}"
              status_code: 200
              return_content: yes
            failed_when: false

      - name: Bootstrap summary
        debug:
          msg:
            - "Manage Record present: {{ (jt_check_manage_record.json.count|int) > 0 or (created_manage_record_response is defined) }}"
            - "Manage Domain present: {{ (jt_check_manage_domain.json.count|int) > 0 or (created_manage_domain_response is defined) }}"
            - "CF credential attached: {{ final_cf_credential_id is defined and final_cf_credential_id != '' }}"
- name: Bootstrap AWX Cloudflare templates
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    awx_url: "{{ lookup('env','AWX_URL') | default('http://127.0.0.1:8052') }}"
    awx_token: "{{ lookup('env','AWX_TOKEN') | default('') }}"
    awx_project_id: "{{ lookup('env','AWX_PROJECT_ID') | default('1') }}"
    awx_inventory_id: "{{ lookup('env','AWX_INVENTORY_ID') | default('1') }}"
    cf_credential_id: "{{ lookup('env','CF_CREDENTIAL_ID') | default('') }}"
  tasks:
    - name: Require AWX_TOKEN
      ansible.builtin.assert:
        that:
          - awx_token != ''
        fail_msg: "AWX_TOKEN must be set in the environment to run this bootstrap playbook"

    - name: Set AWX headers
      set_fact:
        awx_headers:
          Authorization: "Bearer {{ awx_token }}"
          Content-Type: "application/json"

    - name: Build job template payloads
      set_fact:
        payload_manage_domain:
          name: "Manage Domain (Cloudflare)"
          description: "Manage Cloudflare domain-level settings and records"
          job_type: "run"
          inventory: "{{ awx_inventory_id | int }}"
          project: "{{ awx_project_id | int }}"
          playbook: "automation/playbooks/cloudflare/wrapper-manage-record.yml"
          ask_variables_on_launch: false
        payload_manage_record: "{{ payload_manage_domain | combine({'name': 'Manage Record (Cloudflare)', 'description': 'Create/Update/Delete DNS records'}) }}"
        payload_sync_domain: "{{ payload_manage_domain | combine({'name': 'Sync Domain Config', 'description': 'Sync domain config between zones'}) }}"

    - name: Ensure Manage Domain template exists
      uri:
        url: "{{ awx_url }}/api/v2/job_templates/?name=Manage%20Domain%20(Cloudflare)"
        method: GET
        headers: "{{ awx_headers }}"
        return_content: yes
      register: jt_check_manage_domain
      failed_when: false

    - name: Create Manage Domain when missing
      uri:
        url: "{{ awx_url }}/api/v2/job_templates/"
        method: POST
        headers: "{{ awx_headers }}"
        body: "{{ payload_manage_domain | to_json }}"
        status_code: 201
        return_content: yes
      when: jt_check_manage_domain.json.count|int == 0
      register: created_manage_domain_response
      failed_when: false

    - name: Ensure Manage Record template exists
      uri:
        url: "{{ awx_url }}/api/v2/job_templates/?name=Manage%20Record%20(Cloudflare)"
        method: GET
        headers: "{{ awx_headers }}"
        return_content: yes
      register: jt_check_manage_record
      failed_when: false

    - name: Create Manage Record when missing
      uri:
        url: "{{ awx_url }}/api/v2/job_templates/"
        method: POST
        headers: "{{ awx_headers }}"
        body: "{{ payload_manage_record | to_json }}"
        status_code: 201
        return_content: yes
      when: jt_check_manage_record.json.count|int == 0
      register: created_manage_record_response
      failed_when: false

    - name: Ensure Sync Domain Config template exists
      uri:
        url: "{{ awx_url }}/api/v2/job_templates/?name=Sync%20Domain%20Config"
        method: GET
        headers: "{{ awx_headers }}"
        return_content: yes
      register: jt_check_sync_domain
      failed_when: false

    - name: Create Sync Domain Config when missing
      uri:
        url: "{{ awx_url }}/api/v2/job_templates/"
        method: POST
        headers: "{{ awx_headers }}"
        body: "{{ payload_sync_domain | to_json }}"
        status_code: 201
        return_content: yes
      when: jt_check_sync_domain.json.count|int == 0
      register: create_sync_domain_response
      failed_when: false

    - name: Lookup Cloudflare credential in AWX
      uri:
        url: "{{ awx_url }}/api/v2/credentials/?name=Cloudflare%20API%20Token"
        method: GET
        headers: "{{ awx_headers }}"
        return_content: yes
      register: cred_lookup
      failed_when: false

    - name: Decide final CF credential id
      set_fact:
        final_cf_credential_id: >-
          {{ cf_credential_id if (cf_credential_id != '') else (cred_lookup.json.results[0].id if (cred_lookup.json.count|int) > 0 else '') }}

    - name: Resolve template ids
      set_fact:
        manage_record_template_id: >-
          {{ (jt_check_manage_record.json.results[0].id if (jt_check_manage_record.json.count|int) > 0 else (created_manage_record_response.json.id if (created_manage_record_response is defined) else '')) }}
        manage_domain_template_id: >-
          {{ (jt_check_manage_domain.json.results[0].id if (jt_check_manage_domain.json.count|int) > 0 else (created_manage_domain_response.json.id if (created_manage_domain_response is defined) else '')) }}

    - name: Attach credential to templates when available
      when: final_cf_credential_id is defined and final_cf_credential_id != ''
      uri:
        url: "{{ awx_url }}/api/v2/job_templates/{{ item }}/"
        method: PATCH
        headers: "{{ awx_headers }}"
        body: "{{ {'credential': (final_cf_credential_id|int)} | to_json }}"
        status_code: 200
        return_content: yes
      loop:
        - "{{ manage_record_template_id }}"
        - "{{ manage_domain_template_id }}"
      failed_when: false

    - name: If no credential available, add minimal survey to ask for token at launch
      when: final_cf_credential_id == '' or final_cf_credential_id is not defined
      block:
        - name: Build minimal CF token survey spec
          set_fact:
            minimal_cf_survey:
              - question_name: "cloudflare_token"
                question_description: "Provide a Cloudflare API token for this run (optional)"
                required: false
                answer_variable_name: "CLOUDFLARE_API_TOKEN"
                type: "password"
                choices: []

        - name: Patch Manage Record template with minimal CF token survey
          uri:
            url: "{{ awx_url }}/api/v2/job_templates/{{ manage_record_template_id }}/"
            method: PATCH
            headers: "{{ awx_headers }}"
            body: "{{ {'survey_enabled': True, 'survey_spec': minimal_cf_survey} | to_json }}"
            status_code: 200
            return_content: yes
          failed_when: false

    - name: Bootstrap summary
      debug:
        msg:
          - "manage_record_present: {{ (jt_check_manage_record.json.count|int) > 0 or (created_manage_record_response is defined) }}"
          - "manage_domain_present: {{ (jt_check_manage_domain.json.count|int) > 0 or (created_manage_domain_response is defined) }}"
          - "sync_domain_present: {{ (jt_check_sync_domain.json.count|int) > 0 or (create_sync_domain_response is defined) }}"
          - "cf_credential_attached: {{ final_cf_credential_id is defined and final_cf_credential_id != '' }}"

  tasks:
    - name: Require AWX_TOKEN
      ansible.builtin.assert:
        that:
          - awx_token != ''
        fail_msg: "AWX_TOKEN must be set in the environment to run this bootstrap playbook"

    - name: Set AWX headers
      set_fact:
        awx_headers:
          Authorization: "Bearer {{ awx_token }}"
          Content-Type: "application/json"

    - name: Build job template payloads
      set_fact:
        payload_manage_domain:
          name: "Manage Domain (Cloudflare)"
          description: "Manage Cloudflare domain-level settings and records"
          job_type: "run"
          inventory: "{{ awx_inventory_id | int }}"
          project: "{{ awx_project_id | int }}"
          playbook: "automation/playbooks/cloudflare/wrapper-manage-record.yml"
          ask_variables_on_launch: false
        payload_manage_record: "{{ payload_manage_domain | combine({'name': 'Manage Record (Cloudflare)', 'description': 'Create/Update/Delete DNS records'}) }}"
        payload_sync_domain: "{{ payload_manage_domain | combine({'name': 'Sync Domain Config', 'description': 'Sync domain config between zones'}) }}"

    - name: Ensure Manage Domain template exists
      uri:
        url: "{{ awx_url }}/api/v2/job_templates/?name=Manage%20Domain%20(Cloudflare)"
        method: GET
        headers: "{{ awx_headers }}"
        return_content: yes
      register: jt_check_manage_domain
      failed_when: false

    - name: Create Manage Domain when missing
      uri:
        url: "{{ awx_url }}/api/v2/job_templates/"
        method: POST
        headers: "{{ awx_headers }}"
        body: "{{ payload_manage_domain | to_json }}"
        status_code: 201
        return_content: yes
      when: jt_check_manage_domain.json.count|int == 0
      register: created_manage_domain_response
      failed_when: false

    - name: Ensure Manage Record template exists
      uri:
        url: "{{ awx_url }}/api/v2/job_templates/?name=Manage%20Record%20(Cloudflare)"
        method: GET
        headers: "{{ awx_headers }}"
        return_content: yes
      register: jt_check_manage_record
      failed_when: false

    - name: Create Manage Record when missing
      uri:
        url: "{{ awx_url }}/api/v2/job_templates/"
        method: POST
        headers: "{{ awx_headers }}"
        body: "{{ payload_manage_record | to_json }}"
        status_code: 201
        return_content: yes
      when: jt_check_manage_record.json.count|int == 0
      register: created_manage_record_response
      failed_when: false

    - name: Ensure Sync Domain Config template exists
      uri:
        url: "{{ awx_url }}/api/v2/job_templates/?name=Sync%20Domain%20Config"
        method: GET
        headers: "{{ awx_headers }}"
        return_content: yes
      register: jt_check_sync_domain
      failed_when: false

    - name: Create Sync Domain Config when missing
      uri:
        url: "{{ awx_url }}/api/v2/job_templates/"
        method: POST
        headers: "{{ awx_headers }}"
        body: "{{ payload_sync_domain | to_json }}"
        status_code: 201
        return_content: yes
      when: jt_check_sync_domain.json.count|int == 0
      register: create_sync_domain_response
      failed_when: false

    - name: Lookup Cloudflare credential in AWX
      uri:
        url: "{{ awx_url }}/api/v2/credentials/?name=Cloudflare%20API%20Token"
        method: GET
        headers: "{{ awx_headers }}"
        return_content: yes
      register: cred_lookup
      failed_when: false

    - name: Decide final CF credential id
      set_fact:
        final_cf_credential_id: >-
          {{ cf_credential_id if (cf_credential_id != '') else (cred_lookup.json.results[0].id if (cred_lookup.json.count|int) > 0 else '') }}

    - name: Resolve template ids
      set_fact:
        manage_record_template_id: >-
          {{ (jt_check_manage_record.json.results[0].id if (jt_check_manage_record.json.count|int) > 0 else (created_manage_record_response.json.id if (created_manage_record_response is defined) else '')) }}
        manage_domain_template_id: >-
          {{ (jt_check_manage_domain.json.results[0].id if (jt_check_manage_domain.json.count|int) > 0 else (created_manage_domain_response.json.id if (created_manage_domain_response is defined) else '')) }}

    - name: Attach credential to templates when available
      when: final_cf_credential_id is defined and final_cf_credential_id != ''
      uri:
        url: "{{ awx_url }}/api/v2/job_templates/{{ item }}/"
        method: PATCH
        headers: "{{ awx_headers }}"
        body: "{{ {'credential': (final_cf_credential_id|int)} | to_json }}"
        status_code: 200
        return_content: yes
      loop:
        - "{{ manage_record_template_id }}"
        - "{{ manage_domain_template_id }}"
      failed_when: false

    - name: If no credential available, add minimal survey to ask for token at launch
      when: final_cf_credential_id == '' or final_cf_credential_id is not defined
      block:
        - name: Build minimal CF token survey spec
          set_fact:
            minimal_cf_survey:
              - question_name: "cloudflare_token"
                question_description: "Provide a Cloudflare API token for this run (optional)"
                required: false
                answer_variable_name: "CLOUDFLARE_API_TOKEN"
                type: "password"
                choices: []

        - name: Patch Manage Record template with minimal CF token survey
          uri:
            url: "{{ awx_url }}/api/v2/job_templates/{{ manage_record_template_id }}/"
            method: PATCH
            headers: "{{ awx_headers }}"
            body: "{{ {'survey_enabled': True, 'survey_spec': minimal_cf_survey} | to_json }}"
            status_code: 200
            return_content: yes
          failed_when: false

    - name: Bootstrap summary
      debug:
        msg:
          - "manage_record_present: {{ (jt_check_manage_record.json.count|int) > 0 or (created_manage_record_response is defined) }}"
          - "manage_domain_present: {{ (jt_check_manage_domain.json.count|int) > 0 or (created_manage_domain_response is defined) }}"
          - "sync_domain_present: {{ (jt_check_sync_domain.json.count|int) > 0 or (create_sync_domain_response is defined) }}"
          - "cf_credential_attached: {{ final_cf_credential_id is defined and final_cf_credential_id != '' }}"
---
- name: Bootstrap AWX Cloudflare templates
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    awx_url: "{{ lookup('env','AWX_URL') | default('http://127.0.0.1:8052') }}"
    ---
    - name: Bootstrap AWX Cloudflare templates
      hosts: localhost
      connection: local
      gather_facts: false
      vars:
        awx_url: "{{ lookup('env','AWX_URL') | default('http://127.0.0.1:8052') }}"
        awx_token: "{{ lookup('env','AWX_TOKEN') | default('') }}"
        awx_project_id: "{{ lookup('env','AWX_PROJECT_ID') | default('1') }}"
        awx_inventory_id: "{{ lookup('env','AWX_INVENTORY_ID') | default('1') }}"
        cf_credential_id: "{{ lookup('env','CF_CREDENTIAL_ID') | default('') }}"

      tasks:
        - name: Require AWX_TOKEN
          ansible.builtin.assert:
            that:
              - awx_token != ''
            fail_msg: "AWX_TOKEN must be set in the environment to run this bootstrap playbook"

        - name: Set AWX headers
          set_fact:
            awx_headers:
              Authorization: "Bearer {{ awx_token }}"
              Content-Type: "application/json"
---
- name: Bootstrap AWX Cloudflare templates
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    awx_url: "{{ lookup('env','AWX_URL') | default('http://127.0.0.1:8052') }}"
    awx_token: "{{ lookup('env','AWX_TOKEN') | default('') }}"
    awx_project_id: "{{ lookup('env','AWX_PROJECT_ID') | default('1') }}"
    awx_inventory_id: "{{ lookup('env','AWX_INVENTORY_ID') | default('1') }}"
    cf_credential_id: "{{ lookup('env','CF_CREDENTIAL_ID') | default('') }}"

  tasks:
    - name: Require AWX_TOKEN
      ansible.builtin.assert:
        that:
          - awx_token != ''
        fail_msg: "AWX_TOKEN must be set in the environment to run this bootstrap playbook"

    - name: Set AWX headers
      set_fact:
        awx_headers:
          Authorization: "Bearer {{ awx_token }}"
          Content-Type: "application/json"

    - name: Build job template payloads
      set_fact:
        payload_manage_domain:
          name: "Manage Domain (Cloudflare)"
          description: "Manage Cloudflare domain-level settings and records"
          job_type: "run"
          inventory: "{{ awx_inventory_id | int }}"
          project: "{{ awx_project_id | int }}"
          playbook: "automation/playbooks/cloudflare/wrapper-manage-record.yml"
          ask_variables_on_launch: false
        payload_manage_record: "{{ payload_manage_domain | combine({'name': 'Manage Record (Cloudflare)', 'description': 'Create/Update/Delete DNS records'}) }}"
        payload_sync_domain: "{{ payload_manage_domain | combine({'name': 'Sync Domain Config', 'description': 'Sync domain config between zones'}) }}"

    - name: Ensure Manage Domain template exists
      uri:
        url: "{{ awx_url }}/api/v2/job_templates/?name=Manage%20Domain%20(Cloudflare)"
        method: GET
        headers: "{{ awx_headers }}"
        return_content: yes
      register: jt_check_manage_domain
      failed_when: false

    - name: Create Manage Domain when missing
      uri:
        url: "{{ awx_url }}/api/v2/job_templates/"
        method: POST
        headers: "{{ awx_headers }}"
        body: "{{ payload_manage_domain | to_json }}"
        status_code: 201
        return_content: yes
      when: jt_check_manage_domain.json.count|int == 0
      register: created_manage_domain_response
      failed_when: false

    - name: Ensure Manage Record template exists
      uri:
        url: "{{ awx_url }}/api/v2/job_templates/?name=Manage%20Record%20(Cloudflare)"
        method: GET
        headers: "{{ awx_headers }}"
        return_content: yes
      register: jt_check_manage_record
      failed_when: false

    - name: Create Manage Record when missing
      uri:
        url: "{{ awx_url }}/api/v2/job_templates/"
        method: POST
        headers: "{{ awx_headers }}"
        body: "{{ payload_manage_record | to_json }}"
        status_code: 201
        return_content: yes
      when: jt_check_manage_record.json.count|int == 0
      register: created_manage_record_response
      failed_when: false

    - name: Ensure Sync Domain Config template exists
      uri:
        url: "{{ awx_url }}/api/v2/job_templates/?name=Sync%20Domain%20Config"
        method: GET
        headers: "{{ awx_headers }}"
        return_content: yes
      register: jt_check_sync_domain
      failed_when: false

    - name: Create Sync Domain Config when missing
      uri:
        url: "{{ awx_url }}/api/v2/job_templates/"
        method: POST
        headers: "{{ awx_headers }}"
        body: "{{ payload_sync_domain | to_json }}"
        status_code: 201
        return_content: yes
      when: jt_check_sync_domain.json.count|int == 0
      register: create_sync_domain_response
      failed_when: false

    - name: Lookup Cloudflare credential in AWX
      uri:
        url: "{{ awx_url }}/api/v2/credentials/?name=Cloudflare%20API%20Token"
        method: GET
        headers: "{{ awx_headers }}"
        return_content: yes
      register: cred_lookup
      failed_when: false

    - name: Decide final CF credential id
      set_fact:
        final_cf_credential_id: >-
          {{ cf_credential_id if (cf_credential_id != '') else (cred_lookup.json.results[0].id if (cred_lookup.json.count|int) > 0 else '') }}

    - name: Resolve template ids
      set_fact:
        manage_record_template_id: >-
          {{ (jt_check_manage_record.json.results[0].id if (jt_check_manage_record.json.count|int) > 0 else (created_manage_record_response.json.id if (created_manage_record_response is defined) else '')) }}
        manage_domain_template_id: >-
          {{ (jt_check_manage_domain.json.results[0].id if (jt_check_manage_domain.json.count|int) > 0 else (created_manage_domain_response.json.id if (created_manage_domain_response is defined) else '')) }}

    - name: Attach credential to templates when available
      when: final_cf_credential_id is defined and final_cf_credential_id != ''
      uri:
        url: "{{ awx_url }}/api/v2/job_templates/{{ item }}/"
        method: PATCH
        headers: "{{ awx_headers }}"
        body: "{{ {'credential': (final_cf_credential_id|int)} | to_json }}"
        status_code: 200
        return_content: yes
      loop:
        - "{{ manage_record_template_id }}"
        - "{{ manage_domain_template_id }}"
      failed_when: false

    - name: If no credential available, add minimal survey to ask for token at launch
      when: final_cf_credential_id == '' or final_cf_credential_id is not defined
      block:
        - name: Build minimal CF token survey spec
          set_fact:
            minimal_cf_survey:
              - question_name: "cloudflare_token"
                question_description: "Provide a Cloudflare API token for this run (optional)"
                required: false
                answer_variable_name: "CLOUDFLARE_API_TOKEN"
                type: "password"
                choices: []

        - name: Patch Manage Record template with minimal CF token survey
          uri:
            url: "{{ awx_url }}/api/v2/job_templates/{{ manage_record_template_id }}/"
            method: PATCH
            headers: "{{ awx_headers }}"
            body: "{{ {'survey_enabled': True, 'survey_spec': minimal_cf_survey} | to_json }}"
            status_code: 200
            return_content: yes
          failed_when: false

    - name: Bootstrap summary
      debug:
        msg:
          - "manage_record_present: {{ (jt_check_manage_record.json.count|int) > 0 or (created_manage_record_response is defined) }}"
          - "manage_domain_present: {{ (jt_check_manage_domain.json.count|int) > 0 or (created_manage_domain_response is defined) }}"
          - "sync_domain_present: {{ (jt_check_sync_domain.json.count|int) > 0 or (create_sync_domain_response is defined) }}"
          - "cf_credential_attached: {{ final_cf_credential_id is defined and final_cf_credential_id != '' }}"
                          register: created_manage_record_response
                          failed_when: false

                        - name: Ensure Sync Domain Config template exists
                          uri:
                            url: "{{ awx_url }}/api/v2/job_templates/?name=Sync%20Domain%20Config"
                            method: GET
                            headers: "{{ awx_headers }}"
                            return_content: yes
                          register: jt_check_sync_domain
                          failed_when: false

                        - name: Create Sync Domain Config when missing
                          uri:
                            url: "{{ awx_url }}/api/v2/job_templates/"
                            method: POST
                            headers: "{{ awx_headers }}"
                            body: "{{ {'name':'Sync Domain Config','description':'Sync domain config between zones','job_type':'run','inventory': (awx_inventory_id|int),'project': (awx_project_id|int),'playbook':'automation/playbooks/cloudflare/wrapper-manage-record.yml','ask_variables_on_launch': False} | to_json }}"
                            status_code: 201
                            return_content: yes
                          when: jt_check_sync_domain.json.count|int == 0
                          register: create_sync_domain_response
                          failed_when: false

                        - name: Lookup Cloudflare credential in AWX
                          uri:
                            url: "{{ awx_url }}/api/v2/credentials/?name=Cloudflare%20API%20Token"
                            method: GET
                            headers: "{{ awx_headers }}"
                            return_content: yes
                          register: cred_lookup
                          failed_when: false

                        - name: Decide final CF credential id
                          set_fact:
                            final_cf_credential_id: >-
                              {{ cf_credential_id if (cf_credential_id != '') else (cred_lookup.json.results[0].id if (cred_lookup.json.count|int) > 0 else '') }}

                        - name: Resolve template ids
                          set_fact:
                            manage_record_template_id: >-
                              {{ (jt_check_manage_record.json.results[0].id if (jt_check_manage_record.json.count|int) > 0 else (created_manage_record_response.json.id if (created_manage_record_response is defined) else '')) }}
                            manage_domain_template_id: >-
                              {{ (jt_manage_domain.json.results[0].id if (jt_manage_domain.json.count|int) > 0 else (created_manage_domain_response.json.id if (created_manage_domain_response is defined) else '')) }}

                        - name: Attach credential to templates when available
                          when: final_cf_credential_id is defined and final_cf_credential_id != ''
                          uri:
                            url: "{{ awx_url }}/api/v2/job_templates/{{ item }}/"
                            method: PATCH
                            headers: "{{ awx_headers }}"
                            body: "{{ {'credential': (final_cf_credential_id|int)} | to_json }}"
                            status_code: 200
                            return_content: yes
                          loop:
                            - "{{ manage_record_template_id }}"
                            - "{{ manage_domain_template_id }}"
                          failed_when: false

                        - name: If no credential available, add minimal survey to ask for token at launch
                          when: final_cf_credential_id == '' or final_cf_credential_id is not defined
                          block:
                            - name: Build survey spec for CLOUDFLARE_API_TOKEN
                              set_fact:
                                minimal_cf_survey:
                                  - question_name: "cloudflare_token"
                                    question_description: "Provide a Cloudflare API token for this run (optional)"
                                    required: false
                                    answer_variable_name: "CLOUDFLARE_API_TOKEN"
                                    type: "password"
                                    choices: []

                            - name: Patch Manage Record template with survey
                              uri:
                                url: "{{ awx_url }}/api/v2/job_templates/{{ manage_record_template_id }}/"
                                method: PATCH
                                headers: "{{ awx_headers }}"
                                body: "{{ {'survey_enabled': True, 'survey_spec': minimal_cf_survey} | to_json }}"
                                status_code: 200
                                return_content: yes
                              failed_when: false

                        - name: Bootstrap summary
                          debug:
                            msg:
                              - "manage_record_present: {{ (jt_check_manage_record.json.count|int) > 0 or (created_manage_record_response is defined) }}"
                              - "manage_domain_present: {{ (jt_manage_domain.json.count|int) > 0 or (created_manage_domain_response is defined) }}"
                              - "sync_domain_present: {{ (jt_check_sync_domain.json.count|int) > 0 or (create_sync_domain_response is defined) }}"
                              - "cf_credential_attached: {{ final_cf_credential_id is defined and final_cf_credential_id != '' }}"
          - "cf_credential_attached: {{ final_cf_credential_id is defined and final_cf_credential_id != '' }}"
---
- name: Bootstrap AWX Cloudflare templates and credential
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    awx_url: "{{ lookup('env','AWX_URL') | default('http://127.0.0.1:8052') }}"
    awx_token: "{{ lookup('env','AWX_TOKEN') | default('') }}"
    awx_project_id: "{{ lookup('env','AWX_PROJECT_ID') | default('1') }}"
    awx_inventory_id: "{{ lookup('env','AWX_INVENTORY_ID') | default('1') }}"
    cf_credential_id: "{{ lookup('env','CF_CREDENTIAL_ID') | default('') }}"
    cf_api_token: "{{ lookup('env','CLOUDFLARE_API_TOKEN') | default('') }}"

  ---
  - name: Bootstrap AWX Cloudflare templates
    hosts: localhost
    connection: local
    gather_facts: false
    vars:
      awx_url: "{{ lookup('env','AWX_URL') | default('http://127.0.0.1:8052') }}"
      awx_token: "{{ lookup('env','AWX_TOKEN') | default('') }}"
      awx_project_id: "{{ lookup('env','AWX_PROJECT_ID') | default('1') }}"
      awx_inventory_id: "{{ lookup('env','AWX_INVENTORY_ID') | default('1') }}"
      cf_credential_id: "{{ lookup('env','CF_CREDENTIAL_ID') | default('') }}"

    tasks:
      - name: Require AWX token
        ansible.builtin.assert:
          that:
            - awx_token != ''
          fail_msg: "AWX_TOKEN must be set in the environment to run this bootstrap playbook"

      - name: Build AWX headers
        set_fact:
          awx_headers:
            Authorization: "Bearer {{ awx_token }}"
            Content-Type: "application/json"

      - name: Ensure Manage Domain template exists
        uri:
          ---
          - name: Bootstrap AWX Cloudflare templates
            hosts: localhost
            connection: local
            gather_facts: false
            vars:
              awx_url: "{{ lookup('env','AWX_URL') | default('http://127.0.0.1:8052') }}"
              awx_token: "{{ lookup('env','AWX_TOKEN') | default('') }}"
              awx_project_id: "{{ lookup('env','AWX_PROJECT_ID') | default('1') }}"
              awx_inventory_id: "{{ lookup('env','AWX_INVENTORY_ID') | default('1') }}"
              cf_credential_id: "{{ lookup('env','CF_CREDENTIAL_ID') | default('') }}"

            tasks:
              - name: Require AWX token
                ansible.builtin.assert:
                  that:
                    - awx_token != ''
                  fail_msg: "AWX_TOKEN must be set in the environment to run this bootstrap playbook"

              - name: Build AWX headers
                set_fact:
                  awx_headers:
                    Authorization: "Bearer {{ awx_token }}"
                    Content-Type: "application/json"

              - name: Ensure Manage Domain template exists
                uri:
                  url: "{{ awx_url }}/api/v2/job_templates/?name=Manage%20Domain%20(Cloudflare)"
                  method: GET
                  headers: "{{ awx_headers }}"
                  return_content: yes
                  status_code: 200
                register: jt_check_manage_domain
                failed_when: false

              - name: Create Manage Domain template when missing
                uri:
                  url: "{{ awx_url }}/api/v2/job_templates/"
                  method: POST
                  headers: "{{ awx_headers }}"
                  body: >
                    {
                      "name": "Manage Domain (Cloudflare)",
                      "description": "Manage Cloudflare domain-level settings and records",
                      "job_type": "run",
                      "inventory": {{ awx_inventory_id }},
                      "project": {{ awx_project_id }},
                      "playbook": "automation/playbooks/cloudflare/wrapper-manage-record.yml",
                      "ask_variables_on_launch": false
                    }
                  status_code: 201
                  return_content: yes
                when: jt_check_manage_domain.json.count == 0
                register: create_manage_domain_response
                failed_when: false

              - name: Ensure Manage Record template exists
                uri:
                  url: "{{ awx_url }}/api/v2/job_templates/?name=Manage%20Record%20(Cloudflare)"
                  method: GET
                  headers: "{{ awx_headers }}"
                  return_content: yes
                  status_code: 200
                register: jt_check_manage_record
                failed_when: false

              - name: Create Manage Record template when missing
                uri:
                  url: "{{ awx_url }}/api/v2/job_templates/"
                  method: POST
                  headers: "{{ awx_headers }}"
                  body: >
                    {
                      "name": "Manage Record (Cloudflare)",
                      "description": "Create/Update/Delete DNS records",
                      "job_type": "run",
                      "inventory": {{ awx_inventory_id }},
                      "project": {{ awx_project_id }},
                      "playbook": "automation/playbooks/cloudflare/wrapper-manage-record.yml",
                      "ask_variables_on_launch": false
                    }
                  status_code: 201
                  return_content: yes
                when: jt_check_manage_record.json.count == 0
                register: create_manage_record_response
                failed_when: false

              - name: Ensure Sync Domain Config template exists
                uri:
                  url: "{{ awx_url }}/api/v2/job_templates/?name=Sync%20Domain%20Config"
                  method: GET
                  headers: "{{ awx_headers }}"
                  return_content: yes
                  status_code: 200
                register: jt_check_sync_domain
                failed_when: false

              - name: Create Sync Domain Config template when missing
                uri:
                  url: "{{ awx_url }}/api/v2/job_templates/"
                  method: POST
                  headers: "{{ awx_headers }}"
                  body: >
                    {
                      "name": "Sync Domain Config",
                      "description": "Sync domain config between zones",
                      "job_type": "run",
                      "inventory": {{ awx_inventory_id }},
                      "project": {{ awx_project_id }},
                      "playbook": "automation/playbooks/cloudflare/wrapper-manage-record.yml",
                      "ask_variables_on_launch": false
                    }
                  status_code: 201
                  return_content: yes
                when: jt_check_sync_domain.json.count == 0
                register: create_sync_domain_response
                failed_when: false

              - name: Lookup any existing Cloudflare credential by name
                uri:
                  url: "{{ awx_url }}/api/v2/credentials/?name=Cloudflare%20API%20Token"
                  method: GET
                  headers: "{{ awx_headers }}"
                  return_content: yes
                  status_code: 200
                register: cred_lookup
                failed_when: false

              - name: Set final_cf_credential_id if provided via env or found in AWX
                set_fact:
                  final_cf_credential_id: >-
                    {{ cf_credential_id if (cf_credential_id != '') else (cred_lookup.json.results[0].id if (cred_lookup.json.count|int) > 0 else '') }}

              - name: If final credential exists, attach it to templates
                when: final_cf_credential_id is defined and final_cf_credential_id != ''
                block:
                  - name: Determine Manage Record template id
                    set_fact:
                      manage_record_template_id: >-
                        {{ (jt_check_manage_record.json.results[0].id if jt_check_manage_record.json.count|int > 0 else create_manage_record_response.json.id | default('')) }}

                  - name: Determine Manage Domain template id
                    set_fact:
                      manage_domain_template_id: >-
                        {{ (jt_check_manage_domain.json.results[0].id if jt_check_manage_domain.json.count|int > 0 else create_manage_domain_response.json.id | default('')) }}

                  - name: Patch Manage Record template to set credential
                    uri:
                      url: "{{ awx_url }}/api/v2/job_templates/{{ manage_record_template_id }}/"
                      method: PATCH
                      headers: "{{ awx_headers }}"
                      body: "{{ {'credential': (final_cf_credential_id|int)} | to_json }}"
                      status_code: 200
                      return_content: yes

                  - name: Patch Manage Domain template to set credential
                    uri:
                      url: "{{ awx_url }}/api/v2/job_templates/{{ manage_domain_template_id }}/"
                      method: PATCH
                      headers: "{{ awx_headers }}"
                      body: "{{ {'credential': (final_cf_credential_id|int)} | to_json }}"
                      status_code: 200
                      return_content: yes

              - name: If no credential available, patch Manage Record template to collect token at launch
                when: final_cf_credential_id is not defined or final_cf_credential_id == ''
                block:
                  - name: Determine Manage Record template id
                    set_fact:
                      manage_record_template_id: >-
                        {{ (jt_check_manage_record.json.results[0].id if jt_check_manage_record.json.count|int > 0 else create_manage_record_response.json.id | default('')) }}

                  - name: Build minimal CF token survey spec
                    set_fact:
                      minimal_cf_survey:
                        - question_name: "cloudflare_token"
                          question_description: "Provide a Cloudflare API token for this run (optional)"
                          required: false
                          answer_variable_name: "CLOUDFLARE_API_TOKEN"
                          type: "password"
                          choices: []

                  - name: Patch Manage Record template with minimal CF token survey
                    uri:
                      url: "{{ awx_url }}/api/v2/job_templates/{{ manage_record_template_id }}/"
                      method: PATCH
                      headers: "{{ awx_headers }}"
                      body: "{{ {'survey_enabled': True, 'survey_spec': minimal_cf_survey} | to_json }}"
                      status_code: 200
                      return_content: yes
                    failed_when: false

              - name: Output bootstrap summary
                debug:
                  msg:
                    - "Manage Record template present: {{ (jt_check_manage_record.json.count|int) > 0 or (create_manage_record_response is defined) }}"
                    - "Manage Domain template present: {{ (jt_check_manage_domain.json.count|int) > 0 or (create_manage_domain_response is defined) }}"
                    - "Sync Domain Config template present: {{ (jt_check_sync_domain.json.count|int) > 0 or (create_sync_domain_response is defined) }}"
                    - "CF credential attached: {{ final_cf_credential_id is defined and final_cf_credential_id != '' }}"
