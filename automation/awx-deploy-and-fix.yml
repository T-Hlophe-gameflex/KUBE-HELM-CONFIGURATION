---
# Orchestrator: wait for AWX, cleanup non-Cloudflare templates, bootstrap Cloudflare resources,
# and ensure Cloudflare credential contains the token from environment.
# Usage: source .env && ansible-playbook automation/awx-deploy-and-fix.yml

- hosts: localhost
  connection: local
  gather_facts: false
  vars:
    awx_host: "http://localhost:30080"
    awx_token_desc: "ansible-deploy-bootstrap-token"
    wait_retries: 30
    wait_delay: 2
    cleanup_playbook: automation/awx-clean-non-cloudflare-templates.yml
    bootstrap_playbook: automation/awx-cloudflare-survey-setup-clean.yml

  tasks:
    - name: Load .env (if present)
      ansible.builtin.include_vars:
        file: "../.env"
        ignore_missing: yes

    - name: Wait for AWX HTTP endpoint to be responsive
      ansible.builtin.uri:
        url: "{{ awx_host }}/api/"
        method: GET
        return_content: no
        status_code: 200
      register: awx_ping
      retries: "{{ wait_retries }}"
      delay: "{{ wait_delay }}"
      until: awx_ping.status == 200

    - name: Ensure AWX admin password is available (from k8s secret)
      ansible.builtin.command:
        cmd: kubectl get secret awx-admin-password -n awx -o jsonpath='{.data.password}' | base64 --decode
      register: awx_admin_pass_cmd
      changed_when: false
      failed_when: awx_admin_pass_cmd.rc != 0

    - name: Set AWX admin password fact
      ansible.builtin.set_fact:
        awx_admin_password: "{{ awx_admin_pass_cmd.stdout }}"

    - name: Create temporary AWX token for orchestration (if AWX_API_TOKEN not set)
      ansible.builtin.uri:
        url: "{{ awx_host }}/api/v2/tokens/"
        method: POST
        force_basic_auth: yes
        user: admin
        password: "{{ awx_admin_password }}"
        body_format: json
        body:
          description: "{{ awx_token_desc }}"
        return_content: yes
      register: awx_token_res
      failed_when: awx_token_res.status not in [200,201]

    - name: Set AWX token fact
      ansible.builtin.set_fact:
        awx_token: "{{ (awx_token_res.json.token if awx_token_res.json is defined else lookup('env','AWX_API_TOKEN')) }}"

    - name: Run cleanup playbook to remove non-Cloudflare templates
      ansible.builtin.command:
        cmd: "ansible-playbook {{ cleanup_playbook }}"
      environment:
        AWX_PASSWORD: "{{ awx_admin_password }}"
      register: cleanup_run
      failed_when: cleanup_run.rc != 0

    - name: Run bootstrap playbook to create Cloudflare resources
      ansible.builtin.command:
        cmd: "ansible-playbook {{ bootstrap_playbook }}"
      environment:
        AWX_PASSWORD: "{{ awx_admin_password }}"
      register: bootstrap_run
      failed_when: bootstrap_run.rc != 0

    - name: Ensure Cloudflare credential inputs contain token (patch via AWX API)
      block:
        - name: Lookup Cloudflare credential type id
          ansible.builtin.uri:
            url: "{{ awx_host }}/api/v2/credential_types/?name=Cloudflare%20API"
            method: GET
            headers:
              Authorization: "Bearer {{ awx_token }}"
            return_content: yes
          register: cf_type_lookup

        - name: Fail if Cloudflare credential type not found
          ansible.builtin.fail:
            msg: "Cloudflare credential type not found in AWX"
          when: cf_type_lookup.json.results | length == 0

        - name: Find existing credential of Cloudflare type
          ansible.builtin.uri:
            url: "{{ awx_host }}/api/v2/credentials/?credential_type={{ cf_type_lookup.json.results[0].id }}&name=Cloudflare%20API%20Credentials"
            method: GET
            headers:
              Authorization: "Bearer {{ awx_token }}"
            return_content: yes
          register: cf_cred_lookup

        - name: Fail if credential not found
          ansible.builtin.fail:
            msg: "Cloudflare API credential not found in AWX"
          when: cf_cred_lookup.json.results | length == 0

        - name: Patch credential inputs with CLOUDFLARE_API_TOKEN
          ansible.builtin.uri:
            url: "{{ awx_host }}/api/v2/credentials/{{ cf_cred_lookup.json.results[0].id }}/"
            method: PATCH
            headers:
              Authorization: "Bearer {{ awx_token }}"
              Content-Type: "application/json"
            body_format: json
            body:
              inputs:
                api_token: "{{ lookup('env','CLOUDFLARE_API_TOKEN') }}"
            status_code: [200,202,204]
          register: patch_cred_res

      when: lookup('env','CLOUDFLARE_API_TOKEN') is defined and lookup('env','CLOUDFLARE_API_TOKEN') != ''

    - name: Summary
      ansible.builtin.debug:
        msg: |
          AWX deploy-and-fix completed. Project/credential/template status may be checked via the AWX UI/API.
