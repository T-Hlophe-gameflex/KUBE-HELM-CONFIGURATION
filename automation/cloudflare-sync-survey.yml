---
- name: Sync AWX Cloudflare survey choices with live domains
  hosts: localhost
  connection: local
  gather_facts: false

  vars:
    cloudflare_api_token: "{{ cloudflare_api_token | default(lookup('env', 'CLOUDFLARE_API_TOKEN')) }}"
    awx_host: "{{ awx_host | default(lookup('env', 'AWX_HOST')) }}"
    awx_username: "{{ awx_username | default(lookup('env', 'AWX_USERNAME')) }}"
    awx_password: "{{ awx_password | default(lookup('env', 'AWX_PASSWORD')) }}"
    awx_token: "{{ awx_token | default(lookup('env', 'AWX_TOKEN')) }}"
    awx_verify_ssl: "{{ awx_verify_ssl | default(false) }}"
    zone_info_template_name: "{{ zone_info_template_name | default('Cloudflare Zone Info') }}"
    api_base: "https://api.cloudflare.com/client/v4"

  pre_tasks:
    - name: Ensure required inputs are provided
      assert:
        that:
          - cloudflare_api_token is defined
          - cloudflare_api_token | length > 0
          - awx_host is defined
          - awx_host | length > 0
        fail_msg: "cloudflare_api_token and awx_host must be provided via vars or environment."

    - name: Validate AWX authentication inputs
      assert:
        that:
          - awx_token | length > 0 or ((awx_username | length > 0) and (awx_password | length > 0))
        fail_msg: "Provide either awx_token or awx_username/awx_password credentials."

    - name: Normalize AWX host URL
      set_fact:
        awx_host_norm: "{{ awx_host if awx_host.startswith('http') else 'https://' + awx_host }}"

    - name: Flag AWX token usage
      set_fact:
        awx_use_token: "{{ (awx_token | default('') | length) > 0 }}"

    - name: Default governance templates list
      set_fact:
        governance_templates: "{{ governance_templates | default(['Cloudflare Domain Operations', 'Cloudflare Global Baseline', 'Cloudflare Platform Sync']) }}"

    - name: Ensure governance templates list
      set_fact:
        governance_templates: >-
          {{
            governance_templates
            if governance_templates is iterable and governance_templates is not string
            else [governance_templates]
          }}

    - name: Build AWX headers
      set_fact:
        awx_headers: >-
          {{
            {'Content-Type': 'application/json'} |
            combine((awx_token | length > 0) | ternary({'Authorization': 'Bearer ' + awx_token}, {}), recursive=True)
          }}

  tasks:
    - name: Fetch Cloudflare zones
      uri:
        url: "{{ api_base }}/zones"
        method: GET
        headers:
          Authorization: "Bearer {{ cloudflare_api_token }}"
          Content-Type: "application/json"
        return_content: true
      register: cloudflare_zones

    - name: Extract domain list
      set_fact:
        cf_domains: "{{ cloudflare_zones.json.result | map(attribute='name') | list | sort }}"

    - name: Fail if no domains discovered
      assert:
        that:
          - cf_domains | length > 0
        fail_msg: "No domains were returned from Cloudflare. Check token permissions."

    - name: Prepare choice string for surveys
      set_fact:
        domain_choices_str: "{{ cf_domains | join('\n') }}"
        default_domain: "{{ cf_domains[0] }}"

    - name: Initialize survey overrides
      set_fact:
        survey_field_overrides:
          survey_domain:
            choices: "{{ domain_choices_str }}"
            default: "{{ default_domain }}"
          template_domain:
            choices: "{{ domain_choices_str }}"
            default: "{{ default_domain }}"
          target_domains:
            choices: "{{ domain_choices_str }}"
        governance_update_log: []

    - name: Sync governance template surveys
      ansible.builtin.include_tasks:
        file: tasks/cloudflare/sync-governance-template.yml
      loop: "{{ governance_templates }}"
      loop_control:
        loop_var: governance_template_name
        label: "{{ governance_template_name }}"

    - name: Lookup zone info template metadata
      uri:
        url: "{{ awx_host_norm }}/api/v2/job_templates/?name={{ zone_info_template_name | urlencode }}"
        method: GET
        headers: "{{ awx_headers }}"
        url_username: "{{ awx_use_token | ternary('', awx_username) }}"
        url_password: "{{ awx_use_token | ternary('', awx_password) }}"
        force_basic_auth: "{{ (not awx_use_token) | bool }}"
        validate_certs: "{{ awx_verify_ssl | bool }}"
      register: zone_info_template
      failed_when: false

    - name: Update zone info survey when template is present
      when: zone_info_template.json.count | default(0) | int > 0
      block:
        - name: Fetch zone info survey spec
          uri:
            url: "{{ awx_host_norm }}/api/v2/job_templates/{{ zone_info_template.json.results[0].id }}/survey_spec/"
            method: GET
            headers: "{{ awx_headers }}"
            url_username: "{{ awx_use_token | ternary('', awx_username) }}"
            url_password: "{{ awx_use_token | ternary('', awx_password) }}"
            force_basic_auth: "{{ (not awx_use_token) | bool }}"
            validate_certs: "{{ awx_verify_ssl | bool }}"
          register: zone_info_survey

        - name: Apply domain choices to zone info survey
          set_fact:
            zone_info_survey_spec: >-
              {{
                zone_info_survey.json
                | combine({
                    'spec': [
                      item
                      | combine(item.variable == 'survey_domain'
                          | ternary({'choices': domain_choices_str, 'default': default_domain}, {}))
                      for item in zone_info_survey.json.spec
                    ]
                  })
              }}

        - name: Persist zone info survey updates
          uri:
            url: "{{ awx_host_norm }}/api/v2/job_templates/{{ zone_info_template.json.results[0].id }}/survey_spec/"
            method: PUT
            headers: "{{ awx_headers }}"
            url_username: "{{ awx_use_token | ternary('', awx_username) }}"
            url_password: "{{ awx_use_token | ternary('', awx_password) }}"
            force_basic_auth: "{{ (not awx_use_token) | bool }}"
            validate_certs: "{{ awx_verify_ssl | bool }}"
            body_format: json
            body: "{{ zone_info_survey_spec }}"
            status_code: 200

    - name: Display completion summary
      debug:
        msg: |
          âœ… Updated AWX surveys with {{ cf_domains | length }} Cloudflare domains.
          Templates updated: {{ governance_update_log | join(', ') if governance_update_log | length > 0 else 'none' }}
          Zone info template: {{ zone_info_template_name if zone_info_template.json.count | default(0) | int > 0 else 'not updated (template missing)' }}
