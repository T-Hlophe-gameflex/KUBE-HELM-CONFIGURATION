---
- name: Cloudflare Domain Workflow
  hosts: localhost
  gather_facts: false
  vars:
    cloudflare_api_token: "{{ lookup('env', 'CLOUDFLARE_API_TOKEN') | trim | regex_replace('\\s+$', '') }}"
    dry_run: true

  tasks:
    - name: Fetch all Cloudflare zones (domains)
      uri:
        validate_certs: false
        url: "https://api.cloudflare.com/client/v4/zones"
        method: GET
        headers:
          Authorization: "Bearer {{ cloudflare_api_token }}"
          Content-Type: application/json
        return_content: true
      register: zones_response
      check_mode: no

    - name: Set available domains
      set_fact:
        available_domains: "{{ (zones_response.json.result | default([])) | map(attribute='name') | list }}"

    - name: Prompt for source domain
      vars:
        prompt: "Select source domain for record replication or management"
      pause:
        prompt: "Available domains: {{ available_domains }}\nEnter source domain: "
      register: source_domain_input

    - name: Set source_domain
      set_fact:
        source_domain: "{{ source_domain_input.user_input }}"

    - name: Fetch DNS records for source domain
      uri:
        validate_certs: false
        url: "https://api.cloudflare.com/client/v4/zones?name={{ source_domain }}"
        method: GET
        headers:
          Authorization: "Bearer {{ cloudflare_api_token }}"
          Content-Type: application/json
        return_content: true
      register: zone_lookup

    - name: Set source_zone_id
      set_fact:
        source_zone_id: "{{ (zone_lookup.json.result | default([]))[0].id if (zone_lookup.json.result | default([]))|length > 0 else '' }}"

    - name: Fetch records for source zone
      uri:
        validate_certs: false
        url: "https://api.cloudflare.com/client/v4/zones/{{ source_zone_id }}/dns_records"
        method: GET
        headers:
          Authorization: "Bearer {{ cloudflare_api_token }}"
          Content-Type: application/json
        return_content: true
      register: records_response
      when: source_zone_id != ''

    - name: Set available records
      set_fact:
        available_records: "{{ records_response.json.result | default([]) }}"

    - name: Prompt for record to replicate (or create new)
      vars:
        record_names: "{{ available_records | map(attribute='name') | list }}"
      pause:
        prompt: "Available records: {{ record_names }}\nEnter record name to replicate (or leave blank to create new): "
      register: record_name_input

    - name: Set selected_record
      set_fact:
        selected_record: >-
          {{ (available_records | selectattr('name', 'equalto', record_name_input.user_input) | list | default([]))[0]
             if record_name_input.user_input and (available_records | selectattr('name', 'equalto', record_name_input.user_input) | list | length) > 0
             else {} }}

    - name: Prompt for target domain
      pause:
        prompt: "Enter target domain for replication: "
      register: target_domain_input

    - name: Set target_domain
      set_fact:
        target_domain: "{{ target_domain_input.user_input }}"

    - name: Fetch target zone id
      uri:
        validate_certs: false
        url: "https://api.cloudflare.com/client/v4/zones?name={{ target_domain }}"
        method: GET
        headers:
          Authorization: "Bearer {{ cloudflare_api_token }}"
          Content-Type: application/json
        return_content: true
      register: target_zone_lookup

    - name: Set target_zone_id
      set_fact:
        target_zone_id: "{{ (target_zone_lookup.json.result | default([]))[0].id if (target_zone_lookup.json.result | default([]))|length > 0 else '' }}"

    - name: Prompt for record config (type, content, TTL, proxy, etc.)
      vars:
        default_type: "{{ selected_record.type if selected_record else 'A' }}"
        default_content: "{{ selected_record.content if selected_record else '' }}"
        default_ttl: "{{ selected_record.ttl if selected_record else 3600 }}"
        default_proxied: "{{ selected_record.proxied if selected_record else false }}"
      pause:
        prompt: "Enter record type [default: {{ default_type }}]: "
      register: record_type_input

    - name: Set record_type
      set_fact:
        record_type: "{{ record_type_input.user_input or default_type }}"


