{# Modern Cloudflare Rules Template - Replaces Legacy Page Rules #}
{# This template generates configurations for Cloudflare's modern Rules Engine #}

{% if rule_action == 'force_https' %}
{
  "action": "redirect",
  "action_parameters": {
    "from_value": {
      "status_code": 301,
      "target_url": {
        "expression": "concat(\"https://\", http.host, http.request.uri.path)"
      },
      "preserve_query_string": true
    }
  },
  "expression": "(http.request.ssl == false)",
  "description": "Force HTTPS redirect for {{ domain }}",
  "enabled": true
}

{% elif rule_action == 'redirect_to_www' %}
{
  "action": "redirect",
  "action_parameters": {
    "from_value": {
      "status_code": 301,
      "target_url": {
        "expression": "concat(\"https://www.\", http.host, http.request.uri.path)"
      },
      "preserve_query_string": true
    }
  },
  "expression": "(http.host eq \"{{ domain }}\")",
  "description": "Redirect apex to www subdomain for {{ domain }}",
  "enabled": true
}

{% elif rule_action == 'redirect_from_www' %}
{
  "action": "redirect",
  "action_parameters": {
    "from_value": {
      "status_code": 301,
      "target_url": {
        "expression": "concat(\"https://\", regex_replace(http.host, \"^www\\\\.\", \"\"), http.request.uri.path)"
      },
      "preserve_query_string": true
    }
  },
  "expression": "(http.host eq \"www.{{ domain }}\")",
  "description": "Redirect www to apex domain for {{ domain }}",
  "enabled": true
}

{% elif rule_action == 'cache_level' %}
{
  "action": "set_cache_settings",
  "action_parameters": {
    "cache": {{ 'false' if (cache_level_mode | default('bypass')) == 'bypass' else 'true' }},
    "cache_level": "{{ cache_level_mode | default('bypass') }}"
  },
  "expression": "(http.host eq \"{{ domain }}\")",
  "description": "Set cache level to {{ cache_level_mode | default('bypass') }} for {{ domain }}",
  "enabled": true
}

{% elif rule_action == 'edge_cache_ttl' %}
{
  "action": "set_cache_settings",
  "action_parameters": {
    "edge_ttl": {
      "mode": "override_origin",
      "default": {{ edge_ttl_value | default(7200) }}
    }
  },
  "expression": "(http.host eq \"{{ domain }}\")",
  "description": "Set Edge Cache TTL to {{ edge_ttl_value | default(7200) }} seconds for {{ domain }}",
  "enabled": true
}

{% elif rule_action == 'argo_smart_routing' %}
{
  "action": "set_config",
  "action_parameters": {
    "argo_smart_routing": "on"
  },
  "expression": "(http.host eq \"{{ domain }}\")",
  "description": "Enable Argo Smart Routing for {{ domain }}",
  "enabled": true
}

{% elif rule_action == 'cache_everything' %}
{
  "action": "set_cache_settings",
  "action_parameters": {
    "cache": true,
    "edge_ttl": {
      "mode": "override_origin",
      "default": 7200
    }
  },
  "expression": "(http.host eq \"{{ domain }}\")",
  "description": "Cache everything for 2 hours on {{ domain }}",
  "enabled": true
}

{% elif rule_action == 'browser_cache_ttl' %}
{
  "action": "set_cache_settings",
  "action_parameters": {
    "browser_ttl": {
      "mode": "override_origin",
      "default": 300
    }
  },
  "expression": "(http.host eq \"{{ domain }}\")",
  "description": "Set browser cache TTL to 5 minutes for {{ domain }}",
  "enabled": true
}

{% else %}
{
  "error": "Unknown rule_action: {{ rule_action }}"
}
{% endif %}
