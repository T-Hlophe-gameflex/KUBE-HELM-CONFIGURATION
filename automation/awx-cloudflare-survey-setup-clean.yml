---
- name: AWX Cloudflare Survey Setup (clean)
  hosts: localhost
  gather_facts: false
  vars:
    awx_host: "{{ lookup('env','AWX_HOST') | default('http://localhost:30080', true) }}"
    awx_api_url: "{{ awx_host.rstrip('/') }}/api/v2"
    awx_api_token: "{{ lookup('env','AWX_API_TOKEN') | default('', true) }}"
    awx_username: "{{ lookup('env','AWX_USERNAME') | default('admin', true) }}"
    awx_password: "{{ lookup('env','AWX_PASSWORD') | default('', true) }}"
    cloudflare_api_token: "{{ lookup('env','CLOUDFLARE_API_TOKEN') | default('', true) }}"
    project_name: "Cloudflare DNS Project"
    project_scm_url: ""  # if set, create a git-backed project using this URL
    inventory_name: "localhost"
    credential_name: "Cloudflare API Credentials"
    credential_type_name: "Cloudflare API"
    job_templates:
      - name: "Cloudflare Domain Operations"
        playbook: "automation/tasks/cloudflare/domain-standardize.yml"
      - name: "Cloudflare Global Baseline"
        playbook: "automation/tasks/cloudflare/global-standardize.yml"
      - name: "Cloudflare Platform Sync"
        playbook: "automation/tasks/cloudflare/platform-sync.yml"

  tasks:
    - name: Obtain AWX token if not provided
      when: awx_api_token == ''
      uri:
        url: "{{ awx_api_url }}/tokens/"
        method: POST
        headers:
          Content-Type: "application/json"
        url_username: "{{ awx_username }}"
        url_password: "{{ awx_password }}"
        force_basic_auth: true
        return_content: true
      register: awx_token_result
      failed_when: false

    - name: Set AWX API token from created token
      set_fact:
        awx_api_token: "{{ awx_token_result.json.token | default('') }}"
      when: awx_api_token == '' and awx_token_result.status == 201

    - name: Ensure AWX API token available
      fail:
        msg: "AWX API token missing; set AWX_API_TOKEN or AWX_USERNAME/AWX_PASSWORD must be correct"
      when: awx_api_token == ''

    - name: Prepare headers
      set_fact:
        awx_headers:
          Content-Type: "application/json"
          Authorization: "Bearer {{ awx_api_token }}"

    - name: Get AWX organizations
      uri:
        url: "{{ awx_api_url }}/organizations/"
        method: GET
        headers: "{{ awx_headers }}"
        return_content: true
      register: orgs_res
      failed_when: false

    - name: Set organization id
      set_fact:
        org_id: "{{ orgs_res.json.results[0].id | default(1) }}"

    - name: Create Cloudflare credential type
      uri:
        url: "{{ awx_api_url }}/credential_types/"
        method: POST
        body_format: json
        body:
          name: "{{ credential_type_name }}"
          kind: "cloud"
          description: "Cloudflare API token"
          inputs:
            fields:
              - id: api_token
                type: string
                label: API Token
                secret: true
          injectors:
            env:
              CLOUDFLARE_API_TOKEN: "{{ '{{ api_token }}' }}"
        headers: "{{ awx_headers }}"
        status_code: [201, 400]
      register: cred_type_res
      failed_when: false

    - name: Lookup existing credential type if create failed
      uri:
        url: "{{ awx_api_url }}/credential_types/?name={{ credential_type_name | urlencode }}"
        method: GET
        headers: "{{ awx_headers }}"
        return_content: true
      register: cred_type_lookup
      failed_when: false

    - name: Set cred_type_id
      set_fact:
        cred_type_id: "{{ cred_type_res.json.id | default(cred_type_lookup.json.results[0].id | default(1)) }}"

    - name: Create project (git-backed if project_scm_url set, otherwise attempt manual)
      uri:
        url: "{{ awx_api_url }}/projects/"
        method: POST
        body_format: json
        body: |
          {% if project_scm_url | length > 0 %}
          {
            "name": "{{ project_name }}",
            "organization": {{ org_id }},
            "scm_type": "git",
            "scm_url": "{{ project_scm_url }}"
          }
          {% else %}
          {
            "name": "{{ project_name }}",
            "organization": {{ org_id }},
            "scm_type": "manual",
            "local_path": "/var/lib/awx/projects/cloudflare"
          }
          {% endif %}
        headers: "{{ awx_headers }}"
        status_code: [201, 400]
      register: project_res
      failed_when: false

    - name: Find existing project by name (if create failed or already exists)
      uri:
        url: "{{ awx_api_url }}/projects/?name={{ project_name | urlencode }}"
        method: GET
        headers: "{{ awx_headers }}"
        return_content: true
      register: project_lookup
      failed_when: false

    - name: Set project_id from create result if available
      when: project_res is defined and project_res.json is defined and project_res.json.id is defined
      set_fact:
        project_id: "{{ project_res.json.id }}"

    - name: Set project_id from lookup if create not available
      when: project_id is not defined and project_lookup is defined and project_lookup.json.results | length > 0
      set_fact:
        project_id: "{{ project_lookup.json.results[0].id }}"

    - name: Fallback - fetch any existing project to use
      when: project_id is not defined
      uri:
        url: "{{ awx_api_url }}/projects/"
        method: GET
        headers: "{{ awx_headers }}"
        return_content: true
      register: projects_list
      failed_when: false

    - name: Set project_id from existing projects list
      when: project_id is not defined and projects_list is defined and projects_list.json.results | length > 0
      set_fact:
        project_id: "{{ projects_list.json.results[0].id }}"

    - name: Get playbooks available in selected project
      when: project_id is defined
      uri:
        url: "{{ awx_api_url }}/projects/{{ project_id }}/playbooks/"
        method: GET
        headers: "{{ awx_headers }}"
        return_content: true
      register: project_playbooks
      failed_when: false

    - name: Create inventory
      uri:
        url: "{{ awx_api_url }}/inventories/"
        method: POST
        body_format: json
        body:
          name: "{{ inventory_name }}"
          organization: "{{ org_id }}"
          variables: "ansible_connection: local\nansible_python_interpreter: {{ ansible_playbook_python | default('/usr/bin/python3') }}"
        headers: "{{ awx_headers }}"
        status_code: [201, 400]
      register: inventory_res
      failed_when: false

    - name: Lookup existing inventory if create failed
      uri:
        url: "{{ awx_api_url }}/inventories/?name={{ inventory_name | urlencode }}&organization={{ org_id }}"
        method: GET
        headers: "{{ awx_headers }}"
        return_content: true
      register: inventory_lookup
      failed_when: false

    - name: Set inventory_id from create result if available
      when: inventory_res is defined and inventory_res.json is defined and inventory_res.json.id is defined
      set_fact:
        inventory_id: "{{ inventory_res.json.id }}"

    - name: Set inventory_id from lookup if create not available
      when: inventory_id is not defined and inventory_lookup is defined and inventory_lookup.json.results | length > 0
      set_fact:
        inventory_id: "{{ inventory_lookup.json.results[0].id }}"

    - name: Fail if inventory_id could not be determined
      when: inventory_id is not defined
      fail:
        msg: "Could not determine inventory id for {{ inventory_name }} in organization {{ org_id }}"

    - name: Create Cloudflare credential
      uri:
        url: "{{ awx_api_url }}/credentials/"
        method: POST
        body_format: json
        body: "{{ {'name': credential_name, 'credential_type': (cred_type_id | default(cred_type_res.json.id | default(1))), 'organization': org_id} }}"
        headers: "{{ awx_headers }}"
        status_code: [201, 400]
      register: credential_res
      failed_when: false

    - name: Get credential type detail to determine input field ids
      uri:
        url: "{{ awx_api_url }}/credential_types/{{ cred_type_id }}"
        method: GET
        headers: "{{ awx_headers }}"
        return_content: true
      register: cred_type_detail
      failed_when: false

    - name: Set credential input key
      set_fact:
        cred_input_key: "{{ cred_type_detail.json.inputs.fields[0].id | default('api_token') }}"

    - name: Patch or create credential inputs (ensure token is set)
      uri:
        url: "{{ awx_api_url }}/credentials/"
        method: POST
        body_format: json
        body: "{{ {'name': credential_name, 'credential_type': (cred_type_id | default(1)), 'organization': org_id, 'inputs': { (cred_input_key) : cloudflare_api_token }} }}"
        headers: "{{ awx_headers }}"
        status_code: [201, 400]
      register: credential_res2
      failed_when: false

    - name: Set credential_id from create result if available
      when: credential_res is defined and credential_res.json is defined and credential_res.json.id is defined
      set_fact:
        credential_id: "{{ credential_res.json.id }}"

    - name: Set credential_id from second create result if available
      when: credential_id is not defined and credential_res2 is defined and credential_res2.json is defined and credential_res2.json.id is defined
      set_fact:
        credential_id: "{{ credential_res2.json.id }}"

    - name: Find existing credential by name if still not found
      when: credential_id is not defined
      uri:
        url: "{{ awx_api_url }}/credentials/?name={{ credential_name | urlencode }}&organization={{ org_id }}"
        method: GET
        headers: "{{ awx_headers }}"
        return_content: true
      register: credential_lookup
      failed_when: false

    - name: Set credential_id from lookup results
      when: credential_id is not defined and credential_lookup is defined and credential_lookup.json.results | length > 0
      set_fact:
        credential_id: "{{ credential_lookup.json.results[0].id }}"

    - name: Fail if credential_id could not be determined
      when: credential_id is not defined
      fail:
        msg: "Could not determine credential id for {{ credential_name }} in organization {{ org_id }}"

    - name: Create job templates
      uri:
        url: "{{ awx_api_url }}/job_templates/"
        method: POST
        body_format: json
        body:
          name: "{{ item.name }}"
          job_type: run
          inventory: "{{ inventory_id }}"
          project: "{{ project_id }}"
          playbook: "{{ item.playbook }}"
          credential: "{{ credential_id }}"
          survey_enabled: true
          ask_variables_on_launch: true
        headers: "{{ awx_headers }}"
        status_code: [201, 400]
      loop: "{{ job_templates }}"
      when: project_playbooks is defined and (item.playbook.split('/')[-1] in (project_playbooks.json | default([])))
      register: jt_res
      failed_when: false
    - name: Warn about skipped job templates because playbook not found
      debug:
        msg: "Skipped creating job template '{{ item.name }}' because playbook '{{ item.playbook }}' not found in project {{ project_id }}"
      loop: "{{ job_templates }}"
      when: project_playbooks is defined and not (item.playbook.split('/')[-1] in (project_playbooks.json | default([])))

    - name: Print summary
      debug:
        msg:
          awx_token: "{{ awx_api_token }}"
          credential_type: "{{ cred_type_res.json | default(cred_type_res) }}"
          project: "{{ project_res.json | default(project_res) }}"
          inventory: "{{ inventory_res.json | default(inventory_res) }}"
          credential: "{{ credential_res.json | default(credential_res) }}"
          job_templates: "{{ jt_res.results | default(jt_res) }}"
