- name: Cloudflare Governance Workflows
  hosts: localhost
  connection: local
  gather_facts: false

  vars:
    cloudflare_api_token: "{{ cloudflare_api_token | default(lookup('env', 'CLOUDFLARE_API_TOKEN'), true) }}"
    workflow: "{{ workflow | default('manage_record') }}"
    target_domains: "{{ target_domains | default([]) }}"
    template_domain: "{{ template_domain | default('') }}"
    platform_preset: "{{ platform_preset | default('full') }}"
    record_keys: "{{ record_keys | default([]) }}"
    standards_file: "{{ playbook_dir ~ '/cloudflare-standards.yml' }}"
    enforce_domain_standards: "{{ (enforce_domain_standards | default(false)) | bool }}"
    global_record_ttl: "{{ global_record_ttl | default('') }}"
    global_record_proxied: "{{ global_record_proxied | default('') }}"
    api_base: "https://api.cloudflare.com/client/v4"
    per_page: 200
    ttl_auto_value: 1
    change_log: []

  vars_files:
    - "{{ standards_file }}"

  pre_tasks:
    - name: Validate Cloudflare API token
      assert:
        that:
          - cloudflare_api_token is defined
          - cloudflare_api_token | length > 0
        fail_msg: "Cloudflare API token is required. Set CLOUDFLARE_API_TOKEN env var or pass cloudflare_api_token variable."

    - name: Normalize target domains input
      set_fact:
        target_domains: "{{ target_domains | string | replace('\r', '') | replace('\n', ',') | split(',') | map('trim') | reject('equalto', '') | list }}"
      when: target_domains is string

    - name: Ensure target domains default list
      set_fact:
        target_domains: "{{ target_domains | default([], true) }}"

    - name: Normalize record keys input
      set_fact:
        record_keys: "{{ record_keys | string | replace('\r', '') | replace('\n', ',') | split(',') | map('trim') | reject('equalto', '') | list }}"
      when: record_keys is string

    - name: Ensure record keys default list
      set_fact:
        record_keys: "{{ record_keys | default([], true) }}"

    - name: Prepare common headers
      set_fact:
        cloudflare_headers:
          Authorization: "Bearer {{ cloudflare_api_token }}"
          Content-Type: "application/json"

    - name: Fetch Cloudflare zones
      uri:
        url: "{{ api_base }}/zones?per_page={{ per_page }}"
        method: GET
        headers: "{{ cloudflare_headers }}"
        return_content: true
      register: zones_response

    - name: Build zone map
      set_fact:
        zone_map: "{{ zone_map | default({}) | combine({ item.name: item.id }) }}"
      loop: "{{ zones_response.json.result | default([]) }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Determine managed domain list
      set_fact:
        managed_domain_list: >-
          {{
            (target_domains if target_domains | length > 0 else (
              managed_domains if managed_domains | length > 0 else (zone_map.keys() | list)
            ))
          }}

    - name: Derive effective record defaults
      set_fact:
        effective_record_defaults: >-
          {{
            record_defaults |
            combine(
              (global_record_ttl | string | trim) != ''
                | ternary({'ttl': global_record_ttl}, {}),
              recursive=True
            ) |
            combine(
              (global_record_proxied | string | trim) != ''
                | ternary({'proxied': global_record_proxied}, {}),
              recursive=True
            )
          }}

    - name: Apply effective record defaults override
      set_fact:
        record_defaults: "{{ effective_record_defaults }}"

    - name: Validate requested domains exist
      assert:
        that:
          - (managed_domain_list | difference(zone_map.keys() | list)) | length == 0
        fail_msg: >-
          Requested domains {{ managed_domain_list | difference(zone_map.keys() | list) }} were not found in the Cloudflare account.

    - name: Validate template domain if provided
      assert:
        that:
          - template_domain | length == 0 or template_domain in zone_map
        fail_msg: "Template domain {{ template_domain }} is not present in the Cloudflare account."

    - name: Decide if DNS records should be collected
      set_fact:
        collect_records: "{{ workflow in ['manage_record', 'global_standardize', 'platform_sync'] }}"

    - name: Build domain list for DNS collection
      set_fact:
        record_collection_domains: "{{ (managed_domain_list + ([template_domain] if template_domain else [])) | select('string') | unique | list }}"
      when: collect_records

    - name: Gather DNS records for relevant domains
      uri:
        url: "{{ api_base }}/zones/{{ zone_map[item] }}/dns_records?per_page={{ per_page }}"
        method: GET
        headers: "{{ cloudflare_headers }}"
        return_content: true
      register: dns_records_response
      loop: "{{ record_collection_domains | default([]) }}"
      loop_control:
        label: "{{ item }}"
      when: collect_records

    - name: Build domain records dictionary
      set_fact:
        domain_records: "{{ domain_records | default({}) | combine({ item.item: item.json.result | default([]) }) }}"
      loop: "{{ dns_records_response.results | default([]) }}"
      when: collect_records

  tasks:
    - name: Run manage record workflow
      include_tasks: tasks/cloudflare/manage-record.yml
      when: workflow == 'manage_record'

    - name: Apply zone standards after record update
      include_tasks: tasks/cloudflare/domain-standardize.yml
      vars:
        managed_domain_list: ["{{ active_domain }}"]
      when:
        - workflow == 'manage_record'
        - enforce_domain_standards | bool
        - active_domain is defined

    - name: Run domain standardization workflow
      include_tasks: tasks/cloudflare/domain-standardize.yml
      when: workflow == 'domain_standardize'

    - name: Run global record standardization workflow
      include_tasks: tasks/cloudflare/global-standardize.yml
      when: workflow == 'global_standardize'

    - name: Run platform sync workflow
      include_tasks: tasks/cloudflare/platform-sync.yml
      when: workflow == 'platform_sync'

  post_tasks:
    - name: Display workflow summary
      debug:
        var: change_log
