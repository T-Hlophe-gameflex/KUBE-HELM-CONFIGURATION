---
# Manage Cloudflare DNS record (idempotent, safety-first defaults)

- name: Normalize inputs
  set_fact:
    dry_run_bool: "{{ (dry_run | default(true)) | bool }}"
    ttl_num: "{{ (ttl | default(3600)) | int }}"
    proxied_bool: "{{ (proxied | default(false)) | bool }}"

- name: Require core parameters
  ansible.builtin.assert:
    that:
      - record_name is defined
      - record_type is defined
      - record_value is defined
    fail_msg: "record_name, record_type and record_value must be provided"

- name: Build candidate zone names from FQDN
  set_fact:
    fqdn_labels: "{{ record_name.split('.') }}"
    candidates: >-
      {{ [ (fqdn_labels[-i:] | join('.')) for i in range(2, (fqdn_labels | length) + 1) ] }}

- name: Discover Cloudflare zone id (try candidates)
  vars:
    cf_token: "{{ lookup('env','CLOUDFLARE_API_TOKEN') | default('') }}"
  block:
    - name: Query Cloudflare for candidate {{ item }}
      ansible.builtin.uri:
        url: "https://api.cloudflare.com/client/v4/zones?name={{ item }}&per_page=1"
        method: GET
        headers:
          Authorization: "Bearer {{ cf_token }}"
          Accept: "application/json"
        return_content: yes
        validate_certs: yes
      register: zone_try
      failed_when: false

    - name: Set discovered zone facts when found
      set_fact:
        cloudflare_zone_name: "{{ item }}"
        cloudflare_zone_id: "{{ zone_try.json.result[0].id }}"
      when: zone_try.json is defined and (zone_try.json.result | length) > 0

  loop: "{{ candidates }}"
  loop_control:
    label: "{{ item }}"
  when: cloudflare_zone_id is not defined

- name: Fail when zone not found
  fail:
    msg: "Unable to discover Cloudflare zone for {{ record_name }}. Tried: {{ candidates }}"
  when: cloudflare_zone_id is not defined

- name: Lookup existing DNS record
  ansible.builtin.uri:
    url: "https://api.cloudflare.com/client/v4/zones/{{ cloudflare_zone_id }}/dns_records?type={{ record_type }}&name={{ record_name }}&per_page=1"
    method: GET
    headers:
      Authorization: "Bearer {{ lookup('env','CLOUDFLARE_API_TOKEN') | default('') }}"
      Accept: "application/json"
    return_content: yes
    validate_certs: yes
  register: existing_record_query
  failed_when: false

- name: Set existing_record fact when present
  set_fact:
    existing_record: "{{ existing_record_query.json.result[0] }}"
  when: existing_record_query.json is defined and (existing_record_query.json.result | length) > 0

- name: Build desired payload
  set_fact:
    desired_payload:
      type: "{{ record_type }}"
      name: "{{ record_name }}"
      content: "{{ record_value }}"
      ttl: "{{ ttl_num }}"
      proxied: "{{ proxied_bool }}"

- name: Determine whether existing record matches desired state
  set_fact:
    record_matches: >-
      {{ (existing_record is defined) and (existing_record.type == desired_payload.type) and (existing_record.name == desired_payload.name) and ((existing_record.content | string) == (desired_payload.content | string)) and ((existing_record.ttl | int) == (desired_payload.ttl | int)) and ((existing_record.proxied | default(false)) == (desired_payload.proxied | default(false))) }}

- name: Nothing to do - record matches desired state
  debug:
    msg: "Record {{ record_name }} already matches desired state; no changes required."
  when: record_matches | bool

- name: Show desired payload when change would be made (dry-run)
  debug:
    msg: "DRY-RUN: desired_payload={{ desired_payload }}"
  when: (not (record_matches | bool)) and dry_run_bool

- name: Ensure CLOUDFLARE_API_TOKEN is present for apply
  ansible.builtin.assert:
    that:
      - "(lookup('env','CLOUDFLARE_API_TOKEN') | default('')) != ''"
    fail_msg: "CLOUDFLARE_API_TOKEN must be present in the runner environment to perform mutating operations"
  when: not dry_run_bool

- name: Update existing record (apply)
  ansible.builtin.uri:
    url: "https://api.cloudflare.com/client/v4/zones/{{ cloudflare_zone_id }}/dns_records/{{ existing_record.id }}"
    method: PUT
    headers:
      Authorization: "Bearer {{ lookup('env','CLOUDFLARE_API_TOKEN') }}"
      Content-Type: "application/json"
      Accept: "application/json"
    body: "{{ desired_payload | to_json }}"
    status_code: 200
    return_content: yes
    validate_certs: yes
  register: update_result
  when: (existing_record is defined) and (not record_matches) and (not dry_run_bool)

- name: Create record (apply)
  ansible.builtin.uri:
    url: "https://api.cloudflare.com/client/v4/zones/{{ cloudflare_zone_id }}/dns_records"
    method: POST
    headers:
      Authorization: "Bearer {{ lookup('env','CLOUDFLARE_API_TOKEN') }}"
      Content-Type: "application/json"
      Accept: "application/json"
    body: "{{ desired_payload | to_json }}"
    status_code: 200
    return_content: yes
    validate_certs: yes
  register: create_result
  when: (existing_record is not defined) and (not dry_run_bool)

- name: Show update API response
  debug:
    msg: "UPDATE_RESPONSE={{ update_result.json if update_result is defined else 'none' }}"
  when: update_result is defined

- name: Show create API response
  debug:
    msg: "CREATE_RESPONSE={{ create_result.json if create_result is defined else 'none' }}"
  when: create_result is defined

- name: Final facts summary
  debug:
    msg:
      - "cloudflare_zone_id={{ cloudflare_zone_id }}"
      - "record_matches={{ record_matches | default(false) }}"
      - "dry_run={{ dry_run_bool }}"

