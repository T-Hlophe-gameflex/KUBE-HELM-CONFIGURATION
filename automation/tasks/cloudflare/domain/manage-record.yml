---
# Manage Cloudflare DNS records (dry-run-first)
- name: Ensure required variables are present
  assert:
    that:
      - domain is not none
      - action is not none
    fail_msg: "survey_domain and survey_action are required"

- name: Normalize booleans and types
  set_fact:
    record_ttl_int: "{{ (record_ttl | int) if (record_ttl is string and record_ttl|length>0) else record_ttl }}"
    record_proxied_bool: "{{ True if record_proxied in ['true','True','1','yes'] else False }}"

- name: Prepare Cloudflare API variables
  set_fact:
    cf_api_base: "https://api.cloudflare.com/client/v4"

- name: Action: list_records
  when: action == 'list_records'
  uri:
    url: "{{ cf_api_base }}/zones/{{ domain }}/dns_records"
    method: GET
    headers:
      Authorization: "Bearer {{ lookup('env','CLOUDFLARE_TOKEN') }}"
    return_content: yes
  register: list_records_resp

- name: Debug list_records (dry-run)
  when: action == 'list_records'
  debug:
    var: list_records_resp

- name: Action: create or replicate record (dry_run debug)
  when: action in ['create','replicate']
  block:
    - name: If replicate, fetch source record
      when: action == 'replicate'
      uri:
        url: "{{ cf_api_base }}/zones/{{ source_zone }}/dns_records/{{ (source_record_choice.split('|')[-1]) }}"
        method: GET
        headers:
          Authorization: "Bearer {{ lookup('env','CLOUDFLARE_TOKEN') }}"
        return_content: yes
      register: source_record_resp

    - name: Build payload from source or survey input
      set_fact:
        payload: >-
          {{ (source_record_resp.json if (action == 'replicate') else {}) | combine({
            'type': (source_record_resp.json.type if action=='replicate' else record_type),
            'name': (source_record_resp.json.name if action=='replicate' else record_name),
            'content': (source_record_resp.json.content if action=='replicate' else record_value),
            'ttl': (source_record_resp.json.ttl if action=='replicate' else (record_ttl_int | default(3600))),
            'proxied': (source_record_resp.json.proxied if action=='replicate' else record_proxied_bool)
          }) }}

    - name: DRY RUN: show what would be POSTed to Cloudflare
      when: dry_run in ['true','True','1']
      debug:
        msg: "DRY RUN: would call POST {{ cf_api_base }}/zones/{{ domain }}/dns_records with payload={{ payload }}"

    - name: Call Cloudflare to create record (live)
      when: dry_run not in ['true','True','1']
      uri:
        url: "{{ cf_api_base }}/zones/{{ domain }}/dns_records"
        method: POST
        headers:
          Authorization: "Bearer {{ lookup('env','CLOUDFLARE_TOKEN') }}"
          Content-Type: "application/json"
        body: "{{ payload | to_json }}"
        status_code: 200,201
        return_content: yes
      register: create_resp

    - name: Debug create response
      when: dry_run not in ['true','True','1']
      debug:
        var: create_resp

- name: Action: update record (dry-run)
  when: action == 'update'
  block:
    - name: Build update payload
      set_fact:
        update_payload:
          type: "{{ record_type }}"
          name: "{{ record_name }}"
          content: "{{ record_value }}"
          ttl: "{{ record_ttl_int | default(3600) }}"
          proxied: "{{ record_proxied_bool }}"

    - name: DRY RUN: show what would be PUT to Cloudflare
      when: dry_run in ['true','True','1']
      debug:
        msg: "DRY RUN: would call PUT {{ cf_api_base }}/zones/{{ domain }}/dns_records/<record_id> with payload={{ update_payload }}"

    - name: Call Cloudflare to update record (live)
      when: dry_run not in ['true','True','1']
      uri:
        url: "{{ cf_api_base }}/zones/{{ domain }}/dns_records/{{ record_id }}"
        method: PUT
        headers:
          Authorization: "Bearer {{ lookup('env','CLOUDFLARE_TOKEN') }}"
          Content-Type: "application/json"
        body: "{{ update_payload | to_json }}"
        status_code: 200
        return_content: yes
      register: update_resp

    - name: Debug update response
      when: dry_run not in ['true','True','1']
      debug:
        var: update_resp

- name: Action: delete record
  when: action == 'delete'
  block:
    - name: DRY RUN: show delete
      when: dry_run in ['true','True','1']
      debug:
        msg: "DRY RUN: would call DELETE {{ cf_api_base }}/zones/{{ domain }}/dns_records/{{ record_id }}"

    - name: Delete record (live)
      when: dry_run not in ['true','True','1']
      uri:
        url: "{{ cf_api_base }}/zones/{{ domain }}/dns_records/{{ record_id }}"
        method: DELETE
        headers:
          Authorization: "Bearer {{ lookup('env','CLOUDFLARE_TOKEN') }}"
        status_code: 200
        return_content: yes
      register: delete_resp

    - name: Debug delete response
      when: dry_run not in ['true','True','1']
      debug:
        var: delete_resp
