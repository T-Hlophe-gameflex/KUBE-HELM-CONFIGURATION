---
# Clone standard records across domains ensuring consistent configuration.

- name: Determine selected record keys for platform sync
  set_fact:
    selected_record_keys: >-
      {{
        record_keys if record_keys | length > 0 else (
          (platform_presets | default({})).get(platform_preset, {}).get('record_keys', [])
          if platform_presets is defined and platform_presets | length > 0
          else (standard_records.keys() | list)
        )
      }}

- name: Ensure record keys exist in standard profile
  assert:
    that:
      - (selected_record_keys | difference(standard_records.keys() | list)) | length == 0
    fail_msg: >-
      Some record keys are not defined in standard_records: {{ selected_record_keys | difference(standard_records.keys() | list) }}

- name: Build platform synchronization targets
  set_fact:
    platform_sync_targets: "{{ lookup('template', 'templates/cloudflare/platform-targets.j2') | from_yaml | default([], true) }}"

- name: Collect errors from target generation
  set_fact:
    platform_sync_errors: "{{ platform_sync_targets | selectattr('error', 'defined') | list }}"

- name: Fail if platform sync target generation detected issues
  assert:
    that:
      - platform_sync_errors | length == 0
    fail_msg: >-
      Platform sync preparation failed: {{ platform_sync_errors }}

- name: Filter valid targets
  set_fact:
    platform_sync_valid_targets: "{{ platform_sync_targets | rejectattr('error', 'defined') | list }}"

- name: Report when no targets require synchronization
  debug:
    msg: "No records require synchronization across domains."
  when: platform_sync_valid_targets | length == 0

- name: Apply platform synchronization
  block:
    - name: Determine FQDN for record
      set_fact:
        platform_target_fqdn: >-
          {{
            target.domain if target.name in ['@', target.domain]
            else (target.name if target.name.endswith(target.domain) else target.name ~ '.' ~ target.domain)
          }}

    - name: Locate existing record in domain snapshot
      set_fact:
        platform_existing_record: >-
          {{
            (domain_records.get(target.domain, [])
              | selectattr('name', 'equalto', platform_target_fqdn)
              | selectattr('type', 'equalto', target.type)
              | list | first) | default({})
          }}

    - name: Determine API endpoint and method
      set_fact:
        platform_record_endpoint: "{{ api_base }}/zones/{{ zone_map[target.domain] }}/dns_records{{ platform_existing_record.id | default('') | ternary('/' ~ platform_existing_record.id, '') }}"
        platform_record_method: "{{ 'PUT' if platform_existing_record else 'POST' }}"

    - name: Build base payload for record
      set_fact:
        platform_payload:
          type: "{{ target.type }}"
          name: "{{ target.name if target.name not in ['@', target.domain] else target.domain }}"
          content: "{{ target.value }}"
          ttl: {{ target.ttl | int }}

    - name: Append proxied flag when provided
      set_fact:
        platform_payload: "{{ platform_payload | combine({'proxied': target.proxied}) }}"
      when: target.proxied is not none

    - name: Submit record to Cloudflare
      uri:
        url: "{{ platform_record_endpoint }}"
        method: "{{ platform_record_method }}"
        headers: "{{ cloudflare_headers }}"
        body_format: json
        body: "{{ platform_payload | to_json }}"
        return_content: true
      register: platform_sync_result

    - name: Append platform sync summary entry
      set_fact:
        change_log: "{{ change_log + [platform_sync_summary] }}"
      vars:
        platform_sync_summary:
          workflow: platform_sync
          domain: "{{ target.domain }}"
          record_key: "{{ target.record_key }}"
          status: {{ platform_sync_result.json.success | default(false) | bool }}

  loop: "{{ platform_sync_valid_targets }}"
  loop_control:
    loop_var: target
  when: platform_sync_valid_targets | length > 0
